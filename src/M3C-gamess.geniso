#!/bin/bash
##################################################################
#
#  This file is part of M3C
#  Copyright (C) by authors (2012-2016)
#  
#  Authors:
#    * Dr. Néstor F. Aguirre (2012-2016)
#          nestor.aguirre@uam.es
#    * Dr. Sergio Díaz-Tendero (2012-2015)
#          sergio.diaztendero@uam.es
#    * Prof. M. Paul-Antoine Hervieux (2012-2015)
#          Paul-Antoine.Hervieux@ipcms.unistra.fr
#    * Prof. Fernando Martín (2012-2015)
#          fernando.martin@uam.es
#    * Prof. Manuel Alcamí (2012-2015)
#          manuel.alcami@uam.es
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from M3C project.
#
##################################################################

if [ -f "$M3C_HOME/bin/gamessDriver.sh" ]
then
	source $M3C_HOME/bin/gamessDriver.sh
else
	source $M3C_HOME/src/gamessDriver.sh
fi

BONDING_TOL_SCALE=1.2  # Se consideran unidos aquellos atomos que satisfacen dij < (Rci+Rcj)*alpha
# SIMILARITY_THR=0.92 # coarse
SIMILARITY_THR=0.97 # fine

##
# @brief
##
function filterIsomers()
{
	local resultsDir=$1
	
	cd $resultsDir
	
	local files=(`ls *.xyz 2> /dev/null`)

	for id1 in `seq 0 $(( ${#files[@]} - 1 ))`
	do
	        for id2 in `seq $(( $id1 + 1 )) $(( ${#files[@]} - 1 ))`
	        do
			chemF1=`molecule.chemicalFormula ${files[$id1]}`
			chemF2=`molecule.chemicalFormula ${files[$id2]}`

			q1=`echo ${files[$id1]} | awk 'BEGIN{FS="[.-]"}{print $2}' | sed 's/q//g'`
			q2=`echo ${files[$id2]} | awk 'BEGIN{FS="[.-]"}{print $2}' | sed 's/q//g'`

			m1=`echo ${files[$id1]} | awk 'BEGIN{FS="[.-]"}{print $3}' | sed 's/m//g'`
			m2=`echo ${files[$id2]} | awk 'BEGIN{FS="[.-]"}{print $3}' | sed 's/m//g'`
		
			if [ "$chemF1" = "$chemF2" -a  "$q1" -eq "$q2" -a "$m1" -eq "$m2" ]
			then
				echo -n "      Comparing ${files[$id1]} <-> ${files[$id2]} ... "
				
				test=`molecule.compare ${files[$id1]} ${files[$id2]} false $SIMILARITY_THR $BONDING_TOL_SCALE | grep OK | wc -l`
				
				if [ "$test" -eq 3 ]
				then
						rm ${files[$id1]}
						break
				fi
			fi
        	done
	done

	# Hay que incluir algo aqui para renumerar los fiheros, ya que ahora sobreviran solo los ultimos	
	
	cd ..
}

##
# @brief
##
function generateIsomers()
{
	local iFileXYZ=$1
	local charge=$2
	local mult=$3
	
	local workDir=""
	local label=""
	local i=""
	local j=""
	local nAtoms=""
	local trial=""
	local molRadius=""
	local successRandom=""
	
	workDir="tmp-${iFileXYZ%.*}.q$charge.m$mult"
	label="${iFileXYZ%.*}.q$charge.m$mult"
	
	rm -rf $workDir
	mkdir $workDir
	
	cp $INIT_GEOM_DIR/*.xyz $workDir
	cd $workDir
	
	nAtoms=`gawk 'BEGIN{i=0}(NR>2 && $0!~/^[[:blank:]]*$/){i++}END{print i}' $iFileXYZ`
	
	mkdir results
	mkdir history-$label
	
	cp $iFileXYZ products.xyz
	
	if [ "$nAtoms" -gt 1 ]
	then
		j=1
		for i in `seq 1 $NSTEPS`
		do
			optgGAMESSTemplate ../$GAMESS_TEMPLATE $NPROCSHARED products.xyz $charge $mult > output.xyz
			nAtomsEnd=`gawk 'BEGIN{i=0}(NR>2 && $0!~/^[[:blank:]]*$/){i++}END{print i}' output.xyz`
			
			cp products.out history-$label/$label-$j.out
			cp products.inp history-$label/$label-$j.inp
			
			if [ -n "`cat output.xyz`" -a "$nAtomsEnd" -eq "$nAtoms" ]
			then
				cp output.xyz results/$label-$j.xyz
				cp products.xyz history-$label/$label-$j-init.xyz
				cp output.xyz history-$label/$label-$j-OK.xyz
				
				j=$(($j+1))
			else
				cp products.xyz history-$label/$label-$i.xyz
			fi
			
			cp ../$M3C_TEMPLATE reactorT.m3c
			
			#################################################
			# Fixing the system radius
			#------------------------------------------------
			molRadius=`molecule.radius products.xyz`
			
			case "$nAtoms" in
				2)
					molRadius=`echo "$molRadius*3.0" | bc -l`
					;;
				3)
					molRadius=`echo "$molRadius*1.5" | bc -l`
					;;
			esac
			
			if [ -n "`grep "systemRadius" reactorT.m3c`" ]
			then
				sed -i 's/systemRadius = .*/systemRadius = '"$molRadius"'/g' reactorT.m3c
			else
				sed -i 's/^\s*END GOPTIONS\s*$/        systemRadius = '"$molRadius"' #<< from M3C-gamess.geniso\nEND GOPTIONS/g' reactorT.m3c
			fi
			#################################################
			
			successRandom="F"
			for trial in `seq 1 10000`
			do
				M3C -i reactorT.m3c > M3C.log 2>&1

				if [ -n "`grep "@@@ ACCEPTED @@@" M3C.log 2> /dev/null`" ]
				then
					successRandom="T"
					break
				fi
			done
			
			if [ "$successRandom" = "F" ]
			then

				case "$nAtoms" in
					2)
						molecule.random -i products.xyz -gamma 2.0 > newRand.xyz
						;;
					3)
						molecule.random -i products.xyz -gamma 1.0 > newRand.xyz
						;;
					*)
						molecule.random -i products.xyz -gamma 0.7 > newRand.xyz
						;;
				esac
				
				mv newRand.xyz products.xyz
			fi
		done
		
		filterIsomers results
	else
		cp products.xyz output.xyz
		cp output.xyz results/$label-1.xyz
		cp output.xyz history-$label/$label-1-OK.xyz
	fi
	
	cd ..
	
	cp $workDir/results/*.xyz $FINAL_GEOM_DIR 2> /dev/null
	cp -r $workDir/history-$label $FINAL_GEOM_DIR
	
	rm -rf $workDir
}

##
# @brief
##
function main()
{
	DATABASE=$1
	GAMESS_TEMPLATE=$2
	M3C_TEMPLATE=$3
	NSTEPS=$4
	INIT_GEOM_DIR=$5
	FINAL_GEOM_DIR=$6
	NPROCSHARED=$7
	
	WORK_DIR=tmp
	
	local lineOK=""
	local xyzFile=""
	local charge=""
	local mult=""
	local oshell=""
	
	##############################
	# Default options
	##############################
	if [ -z "$DATABASE" -o \
		 -z "$GAMESS_TEMPLATE" -o \
		 -z "$M3C_TEMPLATE" -o \
		 -z "$NSTEPS" -o \
		 -z "$INIT_GEOM_DIR" -o \
		 -z "$FINAL_GEOM_DIR" ]
	then
		echo "usage: M3C-gamess.geniso database gamessTemplate M3CTemplate nSteps initGeomDir resultsGeomDir [ nProcShared ]"
		echo "                                                                                                      1       "
		exit
	fi

	[ -z "$NPROCSHARED" ] && NPROCSHARED=1
	##############################
	
	if [ -z "$M3C_NTHREADS" ]
	then
		M3C_NTHREADS=`cat /proc/cpuinfo | grep processor | wc -l`
	fi
	nThreads=$(( $M3C_NTHREADS/$NPROCSHARED ))
	
	xyzFile=( `gawk '($1!~/^[[:blank:]]*$/ && $1!~/^[[:blank:]]*#/){ print $1 }' $DATABASE` )
	charge=( `gawk '($1!~/^[[:blank:]]*$/ && $1!~/^[[:blank:]]*#/){ print $2 }' $DATABASE` )
	mult=( `gawk '($1!~/^[[:blank:]]*$/ && $1!~/^[[:blank:]]*#/){ print $3 }' $DATABASE` )
	
	#-----------------------------------------------------------------------
	
	startTime=`date "+%s"`
	
	if [ -d "$FINAL_GEOM_DIR" ]
	then
		echo "@@@ WARNING @@@ There is already an output directory ($FINAL_GEOM_DIR). Backup copy will be generated"
		mv $FINAL_GEOM_DIR $FINAL_GEOM_DIR.backup-`date +%Y%m%d`
	fi
	mkdir $FINAL_GEOM_DIR

	ij=-1
	for (( i=0; i<=$(( ${#xyzFile[@]}/$nThreads-1 )); i++ ))
	do
		iStartTime=`date "+%s"`
		
		echo -n "Running: "
		
		for (( j=1; j<=$nThreads; j++ ))
		do
			ij=$(( $j-1+$nThreads*$i ))
			
			if (( j != $nThreads ))
			then
				printf "%20s," "${xyzFile[$ij]%.*}"
			else
				printf "%20s" "${xyzFile[$ij]%.*}"
			fi
			
			generateIsomers ${xyzFile[$ij]} ${charge[$ij]} ${mult[$ij]} &
		done
		
		echo -n " ... "
		
		wait
		
		iEndTime=`date "+%s"`
		elapsedTime=$(( $iEndTime-$iStartTime ))
		echo "OK     `echo -n  "Time elapsed:"` $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	done

	if (( $ij < ${#xyzFile[@]} ))
	then
		iStartTime=`date "+%s"`
		
		echo -n "Running: "
		
		k=1
		for (( i=$(( $ij+1 )); i<${#xyzFile[@]}; i++ ))
		do
			if (( $i != $(( ${#xyzFile[@]} - 1 )) ))
			then
				printf "%20s," "${xyzFile[$i]%.*}"
			else
				printf "%20s " "${xyzFile[$i]%.*}"
			fi
			
			generateIsomers ${xyzFile[$i]} ${charge[$i]} ${mult[$i]} &

			k=$(( $k+1 ))
		done
		
		for (( i=$k; i<=$nThreads; i++ ))
		do
			if (( i != $nThreads ))
			then
				printf "%20s " ""
			else
				printf "%20s" ""
			fi
		done
		
		echo -n " ... "
		
		wait
		
		iEndTime=`date "+%s"`
		elapsedTime=$(( $iEndTime-$iStartTime ))
		echo "OK     `echo -n  "Time elapsed:"` $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	fi
	
	endTime=`date "+%s"`
	elapsedTime=$(( $endTime-$startTime ))
	
	echo -n "         "
	printf "%$(( 10*(${nThreads} + 2) ))s" ""
	echo "      ` echo -n  "Total"`: $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	
	#-----------------------------------------------------------------------

}

main $*

