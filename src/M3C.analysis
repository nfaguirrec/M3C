#!/bin/bash
##################################################################
#
#  This file is part of M3C
#  Copyright (C) by authors (2012-2016)
#  
#  Authors:
#    * Dr. Néstor F. Aguirre (2012-2016)
#          nestor.aguirre@uam.es
#    * Dr. Sergio Díaz-Tendero (2012-2015)
#          sergio.diaztendero@uam.es
#    * Prof. M. Paul-Antoine Hervieux (2012-2015)
#          Paul-Antoine.Hervieux@ipcms.unistra.fr
#    * Prof. Fernando Martín (2012-2015)
#          fernando.martin@uam.es
#    * Prof. Manuel Alcamí (2012-2015)
#          manuel.alcami@uam.es
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from M3C project.
#
##################################################################

FILTER=".*"

[ -z "$M3C_GNUPLOT_EXEC"  ] && M3C_GNUPLOT_EXEC="gnuplot"
[ -z "$M3C_PLOT_TERMINAL" ] && M3C_PLOT_TERMINAL="set terminal wxt size 800,400"
[ -z "$M3C_PLOT_SIZE"     ] && M3C_PLOT_SIZE="square"
[ -z "$M3C_PLOT_LW"       ] && M3C_PLOT_LW="2.0"
[ -z "$M3C_PLOT_XRANGE"   ] && M3C_PLOT_XRANGE="[:]"
[ -z "$M3C_PLOT_CBRANGE"   ] && M3C_PLOT_CBRANGE="[:]"
[ -z "$M3C_HISTOGRAM_NBINS"   ] && M3C_HISTOGRAM_NBINS="100"

LOCAL_DIR=$PWD  # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s

####################################
#
####################################
function getValueFromIFIle()
{
	local iFile=$1
	local block=`echo $2 | gawk 'BEGIN{FS=":"}{print $1}'`
	local param=`echo $2 | gawk 'BEGIN{FS=":"}{print $2}'`
	
	gawk '
	BEGIN{loc=0}
	($1!~"#" && $0!~"^[[:blank:]]*$"){
		if($0~"END '$block'") loc=0
		if(loc==1) print $0
		if($0~"BEGIN '$block'") loc=1
	}' $iFile | gawk '($1~"'$param'"){ print $3 }'
}

####################################
#
####################################
function getTableFromIFile()
{
	local iFile=$1
	local block=`echo $2 | gawk 'BEGIN{FS=":"}{print $1}'`
	
	gawk '
	BEGIN{loc=0}
	($1!~"#" && $0!~"^[[:blank:]]*$"){
		if($0~"END '$block'") loc=0
		if($0!~"=" && loc==1) print $0
		if($0~"BEGIN '$block'") loc=1
	}' $iFile
}

####################################
#
####################################
function energyHistoryDiagram()
{
	local iFile=$1
	
	firstElecEnergy=`head -n7 $iFile | tail -n1 | gawk '{print $4}'`
	nExp=`gawk 'BEGIN{n=0}($0~/^[[:blank:]]*$/){ n++ }END{print n/2-0.5}' $iFile`
	
# 1              2              3              4              5              6
# #             trans       intermol            vib            rot            tot     formula
# #                eV             eV             eV             eV               
# #           -------       --------        -------          -----        -------
#  pV         7.07940        6.92060        0.00000        0.00000       14.00000     C(t1)+C(t1)
#  rS         5.11290        8.88710        0.00000        0.00000       14.00000     C(s1)+C(s1)
#  pV         7.85160        6.14840        0.00000        0.00000       14.00000     C(t1)+C(t1)
#  rS         7.01260        6.98740        0.00000        0.00000       14.00000     C(t1)+C(t1)
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set format y "%.1f"
set format x "%.0t.10^{%T}"
set xtics add ("0^ " 0)
set key out right center
set xtics font "Helvetica Bold,7" rotate by -45
set ytics font "Helvetica Bold,7"
unset key
set yrange [0:]

set multiplot layout 2,2 columnsfirst scale 1.0,1.1

set ylabel "Translational (eV)" font "Helvetica Bold,9"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'$iFile' i $(($i-1)) u :2 notitle w l lw 0.6 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5

set ylabel "Intermolecular (eV)"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :3 notitle w l lw 0.6 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5

set ylabel "Vibrational (eV)"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :4 notitle w l lw 0.6 lt $i, \\" >> .plotE-$$
	done
	
	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5

set ylabel "Rotational (eV)" font "Helvetica Bold,9"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :4 notitle w l lw 0.6 lt $i, \\"  >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5

EOF

	cat >> .plotE-$$ << EOF
	
unset multiplot

pause -1
EOF
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function weightHistoryDiagram()
{
	local iFile=$1
	
	firstElecEnergy=`head -n7 $iFile | tail -n1 | gawk '{print $4}'`
	nExp=`gawk 'BEGIN{n=0}($0~/^[[:blank:]]*$/){ n++ }END{print n/2-0.5}' $iFile`
	
# 1              2              3              4              5              6             7
# #              LnWe           LnWv           LnWn           LnWr           LnWt            LnW     formula
# #              arb.           arb.           arb.           arb.           arb.           arb.     
# #           -------        -------       --------       --------       --------        -------     -------
#  pV         4.39445        0.00000       -0.69315        0.00000       21.52594       25.22724     C(t1)+C(t1)
#  rS         3.21888        0.00000       -0.69315        0.00000       21.68865       24.21438     C(s1)+C(s1)
#  pV         4.39445        0.00000       -0.69315        0.00000       21.47418       25.17548     C(t1)+C(t1)
#  rS         4.39445        0.00000       -0.69315        0.00000       21.53068       25.23198     C(t1)+C(t1)
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set format y "%.1f"
set format x "%.0t.10^{%T}"
set xtics add ("0^ " 0)
set key out right center
set xtics font "Helvetica Bold,7" rotate by -45
set ytics font "Helvetica Bold,7"
unset key
set yrange [0:]

set multiplot layout 2,2 columnsfirst scale 1.0,1.1

set ylabel "Electronic" font "Helvetica Bold,9"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'$iFile' i $(($i-1)) u :(\$2+\$4) notitle w l lw 0.6 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :7 t "total" w l lt 0 lw 1.5

set ylabel "Vibrational" font "Helvetica Bold,9"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :3 notitle w l lw 0.6 lt $i, \\"  >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :7 t "total" w l lt 0 lw 1.5

set ylabel "Rotational"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :5 notitle w l lw 0.6 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :7 t "total" w l lt 0 lw 1.5

set ylabel "Translational"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :6 notitle w l lw 0.6 lt $i, \\" >> .plotE-$$
	done
	
	cat >> .plotE-$$ << EOF
"" u :7 t "total" w l lt 0 lw 1.5

EOF

	cat >> .plotE-$$ << EOF
	
unset multiplot

pause -1
EOF
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function historyDiagram()
{
	local iFile=$1
	
	nExp=`gawk 'BEGIN{n=0}($0~/^[[:blank:]]*$/){ n++ }END{print n/2}' $iFile`
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set format y "%.2f"
set format x "%.0t.10^{%T}"
set xtics add ("0^ " 0)
set key out right center
set xtics font "Helvetica Bold,7" rotate by -45
set ytics font "Helvetica Bold,7"
unset key

set multiplot layout 2,2 columnsfirst scale 1.0,1.1

set ylabel "Translational (eV)" font "Helvetica Bold,9"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'$iFile' i $(($i-1)) u :2 t 'kinetic' w l lw 0.8 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

set ylabel "Potential (eV)" font "Helvetica Bold,9"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :3 t 'intermolecular' w l lw 0.8 lt $i, \\"  >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

set ylabel "Vibrational (eV)"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :4 t 'vibrational' w l lw 0.8 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

set ylabel "Rotational (eV)"
plot $M3C_PLOT_XRANGE [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :5 t 'rotational' w l lw 0.8 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

# set ylabel "Weight (arb)"
# plot $M3C_PLOT_XRANGE [:] \\
EOF

# 	for i in `seq 1 $nExp`
# 	do
# 		if [ "$i" != "$nExp" ]
# 		then
# 			echo "'' i $(($i-1)) u :8 t 'Ln(W)' w l lw 0.3 lt $i, \\" >> .plotE-$$
# 		else
# 			echo "'' i $(($i-1)) u :8 t 'Ln(W)' w l lw 0.3 lt $i" >> .plotE-$$
# 		fi
# 	done

	cat >> .plotE-$$ << EOF
	
unset multiplot

pause -1
EOF
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function histogram1D()
{
	local iFile=$1
	local col=$2
	local nBins=$3
	local normalize=$4

	[ -z "$nBins" ] && nBins="60"
	[ -z "$normalize" ] && normalize="TRUE"
	

	# Se eliminan los espacios en blanco y los comentarios
	# por lo tanto, todos los experimentos entran en el
	# mismo análisis
	sed '/^[[:blank:]]*$/d;/#/d' $iFile > .tmpFile$$
	
	# Se capturan los parámetros para el histograma
	col1=`echo $col | gawk 'BEGIN{FS=","}{print $1}'`
	nbars1=`echo $nBins | gawk 'BEGIN{FS=","}{print $1}'`
	min1=`cat .tmpFile$$ | sort -k $col1 -n | head -n1 | gawk '{print $'$col1'}'`
	max1=`cat .tmpFile$$ | sort -k $col1 -n | tail -n1 | gawk '{print $'$col1'}'`
	h1=`echo "($max1-($min1))/$nbars1" | bc -l`
	
	gawk '
	BEGIN{
		xb='`echo $min1`'
		xe='`echo $max1`'
		hx='`echo $h1`'
	}

	{
		nx=int(($'`echo $col1`'-xb)/hx)
		
		if( nx in mymap ){
			mymap[nx]+=1
		}else{
			mymap[nx]=1
		}
	}

	END{
		sum=0.0
		
		x = xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			if( nx in mymap )
				sum += mymap[nx]
		}
		
		x=xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			if( nx in mymap )
				if ( "'$normalize'" == "TRUE" )
					printf "%20.10f%20.10f\n", x, mymap[nx]/(hx*sum)
				else
					printf "%20.10f%20.10f\n", x, mymap[nx]
# 			else
# 				printf "%20.10f%20.10f\n", x, 0.0
		}
	}
	' .tmpFile$$
	
	rm .tmpFile$$
}

####################################
#
####################################
function histogram2D()
{
	local iFile=$1
	local cols=$2
	local nBins=$3
	local normalize=$4

	[ -z "$nBins" ] && nBins="60,60"
	[ -z "$normalize" ] && normalize="TRUE"
	
	# Se eliminan los espacios en blanco y los comentarios
	# por lo tanto, todos los experimentos entran en el
	# mismo análisis
	sed '/^[[:blank:]]*$/d;/#/d' $iFile > .tmpFile$$
	
	# Se capturan los parámetros para el histograma
	col1=`echo $cols | gawk 'BEGIN{FS=","}{print $1}'`
	nbars1=`echo $nBins | gawk 'BEGIN{FS=","}{print $1}'`
	min1=`cat .tmpFile$$ | sort -k $col1 -n | head -n1 | gawk '{print $'$col1'}'`
	max1=`cat .tmpFile$$ | sort -k $col1 -n | tail -n1 | gawk '{print $'$col1'}'`
	h1=`echo "($max1-($min1))/$nbars1" | bc -l`
	
	col2=`echo $cols | gawk 'BEGIN{FS=","}{print $2}'`
	nbars2=`echo $nBins | gawk 'BEGIN{FS=","}{print $2}'`
	min2=`cat .tmpFile$$ | sort -k $col2 -n | head -n1 | gawk '{print $'$col2'}'`
	max2=`cat .tmpFile$$ | sort -k $col2 -n | tail -n1 | gawk '{print $'$col2'}'`
	h2=`echo "($max2-($min2))/$nbars2" | bc -l`
	
	gawk '
	BEGIN{
		xb='`echo $min1`'
		xe='`echo $max1`'
		hx='`echo $h1`'
		
		yb='`echo $min2`'
		ye='`echo $max2`'
		hy='`echo $h2`'
	}

	{
		nx=int(($'`echo $col1`'-xb)/hx)
		ny=int(($'`echo $col2`'-yb)/hy)
		
		if( (nx,ny) in mymap ){
			mymap[nx,ny]+=1
		}else{
			mymap[nx,ny]=1
		}
	}

	END{
		sum=0.0
		
		x = xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			y = yb
			for( ny=0; y<=ye; ny++ ){
				y = yb + ny*hy
				
				if( (nx,ny) in mymap )
					sum += mymap[nx,ny]
			}
		}
		
		x = xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			y = yb
			for( ny=0; y<=ye; ny++ ){
				y = yb + ny*hy
				
				if( (nx,ny) in mymap )
					if( "'$normalize'" == "TRUE" )
						printf "%20.10f%20.10f%20.10f\n", x, y, mymap[nx,ny]/(hx*hy*sum)
					else
						printf "%20.10f%20.10f%20.10f\n", x, y, mymap[nx,ny]
# 				else
# 					printf "%20.10f%20.10f%20.10f\n", x, y, 0.0
			}
			
			print ""
		}
	}
	' .tmpFile$$
	
	rm .tmpFile$$
}

####################################
#
####################################
function histogram3D()
{
	local iFile=$1
	local cols=$2
	local nBins=$3
	local normalize=$4

	[ -z "$nBins" ] && nBins="60,60,60"
	[ -z "$normalize" ] && normalize="TRUE"
	
	# Se eliminan los espacios en blanco y los comentarios
	# por lo tanto, todos los experimentos entran en el
	# mismo análisis
	sed '/^[[:blank:]]*$/d;/#/d' $iFile > .tmpFile$$
	
	# Se capturan los parámetros para el histograma
	col1=`echo $cols | gawk 'BEGIN{FS=","}{print $1}'`
	nbars1=`echo $nBins | gawk 'BEGIN{FS=","}{print $1}'`
	min1=`cat .tmpFile$$ | sort -k $col1 -n | head -n1 | gawk '{print $'$col1'}'`
	max1=`cat .tmpFile$$ | sort -k $col1 -n | tail -n1 | gawk '{print $'$col1'}'`
	h1=`echo "($max1-($min1))/$nbars1" | bc -l`
	
	col2=`echo $cols | gawk 'BEGIN{FS=","}{print $2}'`
	nbars2=`echo $nBins | gawk 'BEGIN{FS=","}{print $2}'`
	min2=`cat .tmpFile$$ | sort -k $col2 -n | head -n1 | gawk '{print $'$col2'}'`
	max2=`cat .tmpFile$$ | sort -k $col2 -n | tail -n1 | gawk '{print $'$col2'}'`
	h2=`echo "($max2-($min2))/$nbars2" | bc -l`
	
	col3=`echo $cols | gawk 'BEGIN{FS=","}{print $3}'`
	nbars3=`echo $nBins | gawk 'BEGIN{FS=","}{print $3}'`
	min3=`cat .tmpFile$$ | sort -k $col3 -n | head -n1 | gawk '{print $'$col3'}'`
	max3=`cat .tmpFile$$ | sort -k $col3 -n | tail -n1 | gawk '{print $'$col3'}'`
	h3=`echo "($max3-($min3))/$nbars3" | bc -l`
	
	gawk '
	BEGIN{
		xb='`echo $min1`'
		xe='`echo $max1`'
		hx='`echo $h1`'
		
		yb='`echo $min2`'
		ye='`echo $max2`'
		hy='`echo $h2`'
		
		zb='`echo $min3`'
		ze='`echo $max3`'
		hz='`echo $h3`'
	}

	{
		nx=int(($'`echo $col1`'-xb)/hx)
		ny=int(($'`echo $col2`'-yb)/hy)
		nz=int(($'`echo $col3`'-zb)/hz)
		
		
		if( (nx,ny,nz) in mymap ){
			mymap[nx,ny,nz]+=1
		}else{
			mymap[nx,ny,nz]=1
		}
	}

	END{
		sum=0.0
		
		x = xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			y = yb
			for( ny=0; y<=ye; ny++ ){
				y = yb + ny*hy
				
				z = zb
				for( nz=0; z<=ze; nz++ ){
					z = zb + nz*hz
					
					if( (nx,ny,nz) in mymap )
						sum += mymap[nx,ny,nz]
				}
			}
		}
		
		x = xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			y = yb
			for( ny=0; y<=ye; ny++ ){
				y = yb + ny*hy
				
				z = zb
				for( nz=0; z<=ze; nz++ ){
					z = zb + nz*hz
					
					if( (nx,ny,nz) in mymap )
						if( "'$normalize'" == "TRUE" )
							printf "%20.10f%20.10f%20.10f%20.10f\n", x, y, z, mymap[nx,ny,nz]/(hx*hy*hz*sum)
						else
							printf "%20.10f%20.10f%20.10f%20.10f\n", x, y, z, mymap[nx,ny,nz]
# 					else
# 						printf "%20.10f%20.10f%20.10f%20.10f\n", x, y, z, 0.0
				}
			}
			
			print ""
		}
	}
	' .tmpFile$$
	
	rm .tmpFile$$
}

####################################
#
####################################
function energyCorrelationDiagram()
{
	local iFile=$1
	local task=$2
	local withLabels=$3
	local freqLabels=$4
	
	test -z "$withLabels"   && withLabels="FALSE"
	test -z "$freqLabels"   && freqLabels=10
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1
set size $M3C_PLOT_SIZE
set format y "%.1f"
set format x "%.1f"

#set format cb "10^{%T}"
#set logscale cb
set format cb "%.1f"

unset key
# set palette defined ( 0 "white", 1 "blue", 2 "green", 3 "orange", 4 "yellow", 5 "red" )
set palette defined ( 0 "blue", 1 "green", 2 "orange", 3 "yellow", 4 "red" )
set xtics rotate by -45 font "Serif,8"
set ytics font "Serif,8"
set cbtics font "Serif,8"
set pointsize 0.7

set xrange $M3C_PLOT_XRANGE
set cbrange $M3C_PLOT_CBRANGE

#             trans       intermol            vib            rot            tot     formula
#               2            3                 4              5              6         7

EOF

	declare -A axisLabel
	declare -A column
	
	axisLabel["Et"]="Translational energy (eV)"
	axisLabel["U"]="Intermolecular potential (eV)"
	axisLabel["Ev"]="Vibrational energy (eV)"
	axisLabel["Er"]="Rotational energy (eV)"
	axisLabel["E"]="Total energy (eV)"
	
	column["Et"]=2
	column["U"]=3
	column["Ev"]=4
	column["Er"]=5
	column["E"]=6
	
	coord1=`echo $task | awk 'BEGIN{FS="."}{print $1}'`
	coord2=`echo $task | awk 'BEGIN{FS="."}{print $3}'`
	
	echo "              Available options:"
	echo "                  Et.vs.U   |  U.vs.Et"
	echo "                  Et.vs.Ev  | Ev.vs.Et"
	echo "                  Et.vs.Er  | Er.vs.Et"
	echo "                   U.vs.Ev  | Ev.vs.U"
	echo "                   U.vs.Er  | Er.vs.U"
	echo "                  Ev.vs.Er  | Er.vs.Ev"

	if [ -z "$task" ]
	then
		echo ""
		echo "### ERROR ### Energy correlation diagram. Unknown option $task"
		exit
	fi
	
	echo "set xlabel '${axisLabel[$coord1]}' font 'Serif,13'" >> .plotE-$$
	echo "set ylabel '${axisLabel[$coord2]}' font 'Serif,13'" >> .plotE-$$
	
	if [ "$withLabels" = "TRUE" ]
	then
		echo "plot [0:] [0:] \"-\" u 1:2:(log(\$3)) w p palette pt 5, \\" >> .plotE-$$
		echo "'$iFile' u ${column[$coord1]}:${column[$coord2]}:7 every $freqLabels w labels font ',5'" >> .plotE-$$
	else
		echo "plot [0:] [0:] \"-\" u 1:2:(log(\$3)) w p palette pt 5" >> .plotE-$$
	fi
	
	histogram2D $iFile "${column[$coord1]},${column[$coord2]}" "$M3C_HISTOGRAM_NBINS,$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	
	echo "pause -1" >> .plotE-$$
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	cp .plotE-$$ $LOCAL_DIR/figure.gnuplot
	
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function energyTernaryCorrelationDiagram()
{
	local iFile=$1
	local task=$2
	local withLabels=$3
	local freqLabels=$4
	
	test -z "$withLabels"   && withLabels="FALSE"
	test -z "$freqLabels"   && freqLabels=10
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1
set bmargin 3
set lmargin 3
set rmargin 3
set tmargin 3
set size ratio 0.866
set yrange [0:0.866]
set xrange [0:1]
set noborder
set noxtics
set noytics

set format cb "10^{%T}"
set logscale cb
set cbrange $M3C_PLOT_CBRANGE

# set palette defined ( 0 "white", 1 "blue", 2 "green", 3 "orange", 4 "yellow", 5 "red" )
set palette defined ( 0 "blue", 1 "green", 2 "orange", 3 "yellow", 4 "red" )
set pm3d implicit at s
set cbtics font "Serif,8"
set pointsize 0.3

set style line 1 lt 1 lw 3 pt -1 ps 1
set style line 2 lt 5 lw 1 pt -1 ps 1

# x
set arrow  1 front from 0.0,0 to 1.00,0.0000 nohead linestyle 1 lc rgb "black" lw 0.7
set arrow  2 front from 0.1,0 to 0.55,0.7790 nohead linestyle 0
set arrow  3 front from 0.2,0 to 0.60,0.6930 nohead linestyle 0
set arrow  4 front from 0.3,0 to 0.65,0.6060 nohead linestyle 0
set arrow  5 front from 0.4,0 to 0.70,0.5200 nohead linestyle 0
set arrow  6 front from 0.5,0 to 0.75,0.4330 nohead linestyle 0
set arrow  7 front from 0.6,0 to 0.80,0.3460 nohead linestyle 0
set arrow  8 front from 0.7,0 to 0.85,0.2600 nohead linestyle 0
set arrow  9 front from 0.8,0 to 0.90,0.1730 nohead linestyle 0
set arrow 10 front from 0.9,0 to 0.95,0.0866 nohead linestyle 0

# z
set arrow 11 front from 1.00,0.0000 to 0.50,0.8660 nohead linestyle 1 lc rgb "black" lw 0.7
set arrow 12 front from 0.95,0.0866 to 0.05,0.0866 nohead linestyle 0
set arrow 13 front from 0.90,0.1730 to 0.10,0.1730 nohead linestyle 0
set arrow 14 front from 0.85,0.2600 to 0.15,0.2600 nohead linestyle 0
set arrow 15 front from 0.80,0.3460 to 0.20,0.3460 nohead linestyle 0
set arrow 16 front from 0.75,0.4330 to 0.25,0.4330 nohead linestyle 0
set arrow 17 front from 0.70,0.5200 to 0.30,0.5200 nohead linestyle 0
set arrow 18 front from 0.65,0.6060 to 0.35,0.6060 nohead linestyle 0
set arrow 19 front from 0.60,0.6930 to 0.40,0.6930 nohead linestyle 0
set arrow 20 front from 0.55,0.7790 to 0.45,0.7790 nohead linestyle 0

# y
set arrow 21 front from 0.50,0.8660 to 0.0,0 nohead linestyle 1 lc rgb "black" lw 0.7
set arrow 22 front from 0.05,0.0866 to 0.1,0 nohead linestyle 0
set arrow 23 front from 0.10,0.1730 to 0.2,0 nohead linestyle 0
set arrow 24 front from 0.15,0.2600 to 0.3,0 nohead linestyle 0
set arrow 25 front from 0.20,0.3460 to 0.4,0 nohead linestyle 0
set arrow 26 front from 0.25,0.4330 to 0.5,0 nohead linestyle 0
set arrow 27 front from 0.30,0.5200 to 0.6,0 nohead linestyle 0
set arrow 28 front from 0.35,0.6060 to 0.7,0 nohead linestyle 0
set arrow 29 front from 0.40,0.6930 to 0.8,0 nohead linestyle 0
set arrow 30 front from 0.45,0.7790 to 0.9,0 nohead linestyle 0

Xp(x,y,z) = 0.5*(x+2*z)/(x+y+z)
Yp(x,y,z)=sqrt(3.0)*x/(x+y+z)/2.0

#             trans       intermol            vib            rot            tot     formula
#               2            3                 4              5              6         7

EOF

	declare -A axisLabel
	declare -A column
	
	axisLabel["Et"]="Translational energy (eV)"
	axisLabel["U"]="Intermolecular potential (eV)"
	axisLabel["Ev"]="Vibrational energy (eV)"
	axisLabel["Er"]="Rotational energy (eV)"
	axisLabel["E"]="Total energy (eV)"
	
	column["Et"]=2
	column["U"]=3
	column["Ev"]=4
	column["Er"]=5
	column["E"]=6
	
	coord1=`echo $task | awk 'BEGIN{FS="."}{print $1}'`
	coord2=`echo $task | awk 'BEGIN{FS="."}{print $3}'`
	coord3=`echo $task | awk 'BEGIN{FS="."}{print $5}'`
	
	echo "              Available options:"
	echo "                  Et.vs.U   |  U.vs.Et"
	echo "                  Et.vs.Ev  | Ev.vs.Et"
	echo "                  Et.vs.Er  | Er.vs.Et"
	echo "                   U.vs.Ev  | Ev.vs.U"
	echo "                   U.vs.Er  | Er.vs.U"
	echo "                  Ev.vs.Er  | Er.vs.Ev"

	if [ -z "$task" ]
	then
		echo ""
		echo "### ERROR ### Energy ternary correlation diagram. Unknown option $task"
		exit
	fi
	
	echo "set label '${axisLabel[$coord1]}' at 0.0, -0.030 center font 'Serif,9'" >> .plotE-$$
	echo "set label '${axisLabel[$coord2]}' at 1.0, -0.030 center font 'Serif,9'" >> .plotE-$$
	echo "set label '${axisLabel[$coord3]}' at 0.5,  0.886 center font 'Serif,9'" >> .plotE-$$
	
	if [ "$withLabels" = "TRUE" ]
	then
		echo "plot \"-\" u (Xp(\$1,\$2,\$3)):(Yp(\$1,\$2,\$3)):4 notitle w p palette pt 7, \\" >> .plotE-$$
		echo "'$iFile' u (Xp(\$${column[$coord1]},\$${column[$coord2]},\$${column[$coord3]})):(Yp(\$${column[$coord1]},\$${column[$coord2]},\$${column[$coord3]})):7 every $freqLabels notitle w labels font ',5'" >> .plotE-$$
	else
		echo "plot \"-\" u (Xp(\$1,\$2,\$3)):(Yp(\$1,\$2,\$3)):4 notitle w p palette pt 7" >> .plotE-$$
	fi
	
	histogram3D $iFile "${column[$coord1]},${column[$coord2]},${column[$coord3]}" "$M3C_HISTOGRAM_NBINS,$M3C_HISTOGRAM_NBINS,$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	
	echo "pause -1" >> .plotE-$$
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	cp .plotE-$$ $LOCAL_DIR/figure.gnuplot
	
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function weightCorrelationDiagram()
{
	local iFile=$1
	local task=$2
	local withLabels=$3
	local freqLabels=$4
	
	test -z "$withLabels"   && withLabels="FALSE"
	test -z "$freqLabels"   && freqLabels=10
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1
set size $M3C_PLOT_SIZE
set format y "%.1f"
set format x "%.1f"

#set logscale cb
#set format cb "10^{%T}"
set format cb "%.1f"

unset key
# set palette defined ( 0 "white", 1 "blue", 2 "green", 3 "orange", 4 "yellow", 5 "red" )
set palette defined ( 0 "blue", 1 "green", 2 "orange", 3 "yellow", 4 "red" )
set xtics rotate by -45 font "Serif,8"
set ytics font "Serif,8"
set cbtics font "Serif,8"
set pointsize 0.4

set xrange $M3C_PLOT_XRANGE
set cbrange $M3C_PLOT_CBRANGE

#              LnWe           LnWv           LnWn           LnWr           LnWt            LnW     formula
#                 2              3              4              5              6              7           8

EOF
	
	declare -A axisLabel
	declare -A column
	
	axisLabel["LnWe"]="LnWe (arb.)"
	axisLabel["LnWv"]="LnWv (arb.)"
	axisLabel["LnWn"]="LnWn (arb.)"
	axisLabel["LnWr"]="LnWr (arb.)"
	axisLabel["LnWt"]="LnWt (arb.)"
	axisLabel["LnW"]="LnW (arb.)"
	
	column["LnWe"]=2
	column["LnWv"]=3
	column["LnWn"]=4
	column["LnWr"]=5
	column["LnWt"]=6
	column["LnW"]=7
	
	coord1=`echo $task | awk 'BEGIN{FS="."}{print $1}'`
	coord2=`echo $task | awk 'BEGIN{FS="."}{print $3}'`
	
	echo "              Available options:"
	echo "                  LnWe.vs.LnWv   |  LnWv.vs.LnWe"
	echo "                  LnWe.vs.LnWn   |  LnWn.vs.LnWe"
	echo "                  LnWe.vs.LnWr   |  LnWr.vs.LnWe"
	echo "                  LnWe.vs.LnWt   |  LnWt.vs.LnWe"
	echo "                  LnWe.vs.LnW    |   LnW.vs.LnWe"
	echo "                  LnWv.vs.LnWn   |  LnWn.vs.LnWv"
	echo "                  LnWv.vs.LnWr   |  LnWr.vs.LnWv"
	echo "                  LnWv.vs.LnWt   |  LnWt.vs.LnWv"
	echo "                  LnWv.vs.LnW    |   LnW.vs.LnWv"
	echo "                  LnWn.vs.LnWr   |  LnWr.vs.LnWn"
	echo "                  LnWn.vs.LnWt   |  LnWt.vs.LnWn"
	echo "                  LnWn.vs.LnW    |   LnW.vs.LnWn"
	echo "                  LnWr.vs.LnWt   |  LnWt.vs.LnWr"
	echo "                  LnWr.vs.LnW    |   LnW.vs.LnWr"
	echo "                  LnWt.vs.LnW    |   LnW.vs.LnWt"

	if [ -z "$task" ]
	then
		echo ""
		echo "### ERROR ### Weight correlation diagram. Unknown option $task"
		exit
	fi
	
	echo "set xlabel '${axisLabel[$coord1]}' font 'Serif,13'" >> .plotE-$$
	echo "set ylabel '${axisLabel[$coord2]}' font 'Serif,13'" >> .plotE-$$
	
	if [ "$withLabels" = "TRUE" ]
	then
		echo "plot \"-\" u 1:2:(log(\$3)) w p palette pt 5, \\" >> .plotE-$$
		echo "'$iFile' u ${column[$coord1]}:${column[$coord2]}:8 every $freqLabels w labels font ',5'" >> .plotE-$$
		
# 		#Esto es un apaño que ya no se hace necesario
# 		if [ "$coord1" = "LnWr" ]
# 		then
# 			echo "splot \"-\" u (\$1/2):2:3 w p ps 0, \\" >> .plotE-$$
# 			echo "'$iFile' u (column(${column[$coord1]})/2.0):${column[$coord2]}:(0.0):8 every $freqLabels w labels font ',5'" >> .plotE-$$
# 		elif [ "$coord2" = "LnWr" ]
# 		then
# 			echo "splot \"-\" u 1:(\$2/2):3 w p ps 0, \\" >> .plotE-$$
# 			echo "'$iFile' u ${column[$coord1]}:(column(${column[$coord2]})/2.0):(0.0):8 every $freqLabels w labels font ',5'" >> .plotE-$$
# 		else
# 			echo "splot \"-\" u 1:2:3 w p ps 0, \\" >> .plotE-$$
# 			echo "'$iFile' u ${column[$coord1]}:${column[$coord2]}:(0.0):8 every $freqLabels w labels font ',5'" >> .plotE-$$
# 		fi
	else
		echo "plot \"-\" u 1:2:(log(\$3)) w p palette pt 5" >> .plotE-$$

# 		#Esto es un apaño que ya no se hace necesario
# 		if [ "$coord1" = "LnWr" ]
# 		then
# 			echo "splot \"-\" u (\$1/2.0):2:3 w p ps 0" >> .plotE-$$
# 		elif [ "$coord2" = "LnWr" ]
# 		then
# 			echo "splot \"-\" u 1:(\$2/2.0):3 w p ps 0" >> .plotE-$$
# 		else
# 			echo "splot \"-\" u 1:2:3 w p ps 0" >> .plotE-$$
# 		fi
	fi
	
	histogram2D $iFile "${column[$coord1]},${column[$coord2]}" "$M3C_HISTOGRAM_NBINS,$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	
	echo "pause -1" >> .plotE-$$
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	cp .plotE-$$ $LOCAL_DIR/figure.gnuplot
	
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function weightTernaryCorrelationDiagram()
{
	local iFile=$1
	local task=$2
	local withLabels=$3
	local freqLabels=$4
	
	test -z "$withLabels"   && withLabels="FALSE"
	test -z "$freqLabels"   && freqLabels=10
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1
set bmargin 3
set lmargin 3
set rmargin 3
set tmargin 3
set size ratio 0.866
set yrange [0:0.866]
set xrange [0:1]
set noborder
set noxtics
set noytics

# set colorbox origin 0.2,0.866
set format cb "10^{%T}"
set logscale cb

# set palette defined ( 0 "white", 1 "blue", 2 "green", 3 "orange", 4 "yellow", 5 "red" )
set palette defined ( 0 "blue", 1 "green", 2 "orange", 3 "yellow", 4 "red" )
set pm3d implicit at s
set cbtics font "Serif,8"
set pointsize 0.3

set style line 1 lt 1 lw 3 pt -1 ps 1
set style line 2 lt 5 lw 1 pt -1 ps 1

# x
set arrow  1 from 0.0,0 to 1.00,0.0000 nohead linestyle 1 lc rgb "black" lw 0.7
set arrow  2 from 0.1,0 to 0.55,0.7790 nohead linestyle 0
set arrow  3 from 0.2,0 to 0.60,0.6930 nohead linestyle 0
set arrow  4 from 0.3,0 to 0.65,0.6060 nohead linestyle 0
set arrow  5 from 0.4,0 to 0.70,0.5200 nohead linestyle 0
set arrow  6 from 0.5,0 to 0.75,0.4330 nohead linestyle 0
set arrow  7 from 0.6,0 to 0.80,0.3460 nohead linestyle 0
set arrow  8 from 0.7,0 to 0.85,0.2600 nohead linestyle 0
set arrow  9 from 0.8,0 to 0.90,0.1730 nohead linestyle 0
set arrow 10 from 0.9,0 to 0.95,0.0866 nohead linestyle 0

# z
set arrow 11 from 1.00,0.0000 to 0.50,0.8660 nohead linestyle 1 lc rgb "black" lw 0.7
set arrow 12 from 0.95,0.0866 to 0.05,0.0866 nohead linestyle 0
set arrow 13 from 0.90,0.1730 to 0.10,0.1730 nohead linestyle 0
set arrow 14 from 0.85,0.2600 to 0.15,0.2600 nohead linestyle 0
set arrow 15 from 0.80,0.3460 to 0.20,0.3460 nohead linestyle 0
set arrow 16 from 0.75,0.4330 to 0.25,0.4330 nohead linestyle 0
set arrow 17 from 0.70,0.5200 to 0.30,0.5200 nohead linestyle 0
set arrow 18 from 0.65,0.6060 to 0.35,0.6060 nohead linestyle 0
set arrow 19 from 0.60,0.6930 to 0.40,0.6930 nohead linestyle 0
set arrow 20 from 0.55,0.7790 to 0.45,0.7790 nohead linestyle 0

# y
set arrow 21 from 0.50,0.8660 to 0.0,0 nohead linestyle 1 lc rgb "black" lw 0.7
set arrow 22 from 0.05,0.0866 to 0.1,0 nohead linestyle 0
set arrow 23 from 0.10,0.1730 to 0.2,0 nohead linestyle 0
set arrow 24 from 0.15,0.2600 to 0.3,0 nohead linestyle 0
set arrow 25 from 0.20,0.3460 to 0.4,0 nohead linestyle 0
set arrow 26 from 0.25,0.4330 to 0.5,0 nohead linestyle 0
set arrow 27 from 0.30,0.5200 to 0.6,0 nohead linestyle 0
set arrow 28 from 0.35,0.6060 to 0.7,0 nohead linestyle 0
set arrow 29 from 0.40,0.6930 to 0.8,0 nohead linestyle 0
set arrow 30 from 0.45,0.7790 to 0.9,0 nohead linestyle 0

Xp(x,y,z) = 0.5*(x+2*z)/(x+y+z)
Yp(x,y,z)=sqrt(3.0)*x/(x+y+z)/2.0

set xrange $M3C_PLOT_XRANGE
set cbrange $M3C_PLOT_CBRANGE

#              LnWe           LnWv           LnWn           LnWr           LnWt            LnW     formula
#                 2              3              4              5              6              7           8

EOF
	
	declare -A axisLabel
	declare -A column
	
	axisLabel["LnWe"]="LnWe (arb.)"
	axisLabel["LnWv"]="LnWv (arb.)"
	axisLabel["LnWn"]="LnWn (arb.)"
	axisLabel["LnWr"]="LnWr (arb.)"
	axisLabel["LnWt"]="LnWt (arb.)"
	axisLabel["LnW"]="LnW (arb.)"
	
	column["LnWe"]=2
	column["LnWv"]=3
	column["LnWn"]=4
	column["LnWr"]=5
	column["LnWt"]=6
	column["LnW"]=7
	
	coord1=`echo $task | awk 'BEGIN{FS="."}{print $1}'`
	coord2=`echo $task | awk 'BEGIN{FS="."}{print $3}'`
	coord3=`echo $task | awk 'BEGIN{FS="."}{print $5}'`
	
	echo "              Available options:"
	echo "                  LnWe.vs.LnWv   |  LnWv.vs.LnWe"
	echo "                  LnWe.vs.LnWn   |  LnWn.vs.LnWe"
	echo "                  LnWe.vs.LnWr   |  LnWr.vs.LnWe"
	echo "                  LnWe.vs.LnWt   |  LnWt.vs.LnWe"
	echo "                  LnWe.vs.LnW    |   LnW.vs.LnWe"
	echo "                  LnWv.vs.LnWn   |  LnWn.vs.LnWv"
	echo "                  LnWv.vs.LnWr   |  LnWr.vs.LnWv"
	echo "                  LnWv.vs.LnWt   |  LnWt.vs.LnWv"
	echo "                  LnWv.vs.LnW    |   LnW.vs.LnWv"
	echo "                  LnWn.vs.LnWr   |  LnWr.vs.LnWn"
	echo "                  LnWn.vs.LnWt   |  LnWt.vs.LnWn"
	echo "                  LnWn.vs.LnW    |   LnW.vs.LnWn"
	echo "                  LnWr.vs.LnWt   |  LnWt.vs.LnWr"
	echo "                  LnWr.vs.LnW    |   LnW.vs.LnWr"
	echo "                  LnWt.vs.LnW    |   LnW.vs.LnWt"

	if [ -z "$task" ]
	then
		echo ""
		echo "### ERROR ### Weight ternary correlation diagram. Unknown option $task"
		exit
	fi
	
	echo "set label '${axisLabel[$coord1]}' at 0.0, -0.030 center font 'Serif,9'" >> .plotE-$$
	echo "set label '${axisLabel[$coord2]}' at 1.0, -0.030 center font 'Serif,9'" >> .plotE-$$
	echo "set label '${axisLabel[$coord3]}' at 0.5,  0.886 center font 'Serif,9'" >> .plotE-$$
	
	if [ "$withLabels" = "TRUE" ]
	then
		echo "plot \"-\" u (Xp(\$1,\$2,\$3)):(Yp(\$1,\$2,\$3)):4 notitle w p palette pt 7, \\" >> .plotE-$$
		echo "'$iFile' u (Xp(\$${column[$coord1]},\$${column[$coord2]},\$${column[$coord3]})):(Yp(\$${column[$coord1]},\$${column[$coord2]},\$${column[$coord3]})):8 every $freqLabels notitle w labels font ',5'" >> .plotE-$$
	else
		echo "plot \"-\" u (Xp(\$1,\$2,\$3)):(Yp(\$1,\$2,\$3)):4 notitle w p palette pt 7" >> .plotE-$$
	fi
	
	histogram3D $iFile "${column[$coord1]},${column[$coord2]},${column[$coord3]}" "$M3C_HISTOGRAM_NBINS,$M3C_HISTOGRAM_NBINS,$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	
	echo "pause -1" >> .plotE-$$
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	cp .plotE-$$ $LOCAL_DIR/figure.gnuplot
	
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function weightHistogram()
{
	local iFile=$1
	
	cat > .plotE-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1
set size $M3C_PLOT_SIZE
set format y "10^{%T}"
set format x "%.1f"

set grid front
unset grid
set logscale y
set key

set ytics font "Serif,8"
set mytics 5
set xlabel "LnW_i" font "Serif,13"
set ylabel "Counts" font "Serif,13"

set xrange $M3C_PLOT_XRANGE

#              LnWe           LnWv           LnWn           LnWr           LnWt            LnW     formula
#                 2              3              4              5              6              7           8

EOF
	
	echo "plot [] [1e-4:] \\" >> .plotE-$$
	echo "\"-\" t 'LnWe' w impulses lw 2 lt 1, \\" >> .plotE-$$
	echo "\"-\" notitle smooth mcsplines w l lw 2 lt 1, \\" >> .plotE-$$
	echo "\"-\" t 'LnWv' w impulses lw 2 lt 2, \\" >> .plotE-$$
	echo "\"-\" notitle smooth mcsplines w l lw 2 lt 2, \\" >> .plotE-$$
	echo "\"-\" t 'LnWn' w impulses lw 2 lt 3, \\" >> .plotE-$$
	echo "\"-\" notitle smooth mcsplines w l lw 2 lt 3, \\" >> .plotE-$$
	echo "\"-\" t 'LnWr' w impulses lw 2 lt 6, \\" >> .plotE-$$
	echo "\"-\" notitle smooth mcsplines w l lw 2 lt 6, \\" >> .plotE-$$
	echo "\"-\" t 'LnWt' w impulses lw 2 lt 7, \\" >> .plotE-$$
	echo "\"-\" notitle smooth mcsplines w l lw 2 lt 7, \\" >> .plotE-$$
	echo "\"-\" t  'LnW' w impulses lw 2 lc rgb 'black', \\" >> .plotE-$$
	echo "\"-\" notitle smooth mcsplines w l lw 2 lc rgb 'black'" >> .plotE-$$
	histogram1D $iFile "2" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "2" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "3" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "3" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "4" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "4" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "5" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "5" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "6" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "6" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "7" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	histogram1D $iFile "7" "$M3C_HISTOGRAM_NBINS" >> .plotE-$$
	echo "EOF" >> .plotE-$$
	
	echo "pause -1" >> .plotE-$$
	
	cp $iFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	cp .plotE-$$ $LOCAL_DIR/figure.gnuplot
	
	$M3C_GNUPLOT_EXEC .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
function JHistoryDiagram()
{
	local iFile=$1
	local xLabel=$2

	python -c '
import sys
import re
from operator import itemgetter

inputFile = file( sys.argv[1], "r" )
lines = inputFile.read().splitlines()
inputFile.close()

species = {}
maxJ = {}

for line in lines:
		if( not re.match( "(^#.*|^[\s]*$)", line ) ):
			items = line.split()
			for item in items:
				tokens = item.split("#")
				
				specie = tokens[0]
# 				specie = tokens[0].split(":")[1].split("(")[0]
				J = int(tokens[1])
				
				if( not specie in species ):
					species[specie] = []
					
				species[specie].append(J)
				
				if( not specie in maxJ ):
					maxJ[specie] = 0
					
				if( J > maxJ[specie] ):
					maxJ[specie] = J

nGroups = 30
histogram = {}

# stepSize = 40

for specie in species.keys():
	if( maxJ[specie] > 0 ):
		stepSize = maxJ[specie]/nGroups
		
		for J in species[specie]:
			n = J/stepSize
			
			if( not specie in histogram ):
				histogram[specie] = {}
				
			if( not n in histogram[specie] ):
				histogram[specie][n] = 0
				
			histogram[specie][n] += 1
			
speciesSorted = sorted( maxJ.items(), key=itemgetter(1), reverse=False )
			
# for specie in species.keys():
for item in speciesSorted:
	specie = item[0]
	
	if( maxJ[specie] > 0 ):
		print "#%20s"%specie, maxJ[specie]
		
		sum = 0.0
		for n in histogram[specie]:
			sum += histogram[specie][n]
			
		stepSize = maxJ[specie]/nGroups
		
		sum2 = 0.0
		for n in range(0,(maxJ[specie]+1)/stepSize):
# 		for n in range(0,(max(maxJ.values())+1)/stepSize):
			J = n*stepSize
			
			if( n in histogram[specie] ):
# 				Prob = float( histogram[specie][n] )/(sum*stepSize)
				Prob = float( histogram[specie][n] )/max(histogram[specie].values())
				sum2 += Prob
				print "%20d"%J, "%20.5f"%Prob
			else:
				Prob = 0.0
				print "%20d"%J, "%20.5f"%Prob
				
		print "#>>>", sum2*stepSize, maxJ[specie]
				
				
		print "\n"
	' $iFile > .rawData-$$
	
	cat > .plotJ-$$ << EOF
set size $M3C_PLOT_SIZE
set origin 0.0,0.02
unset key
set style fill transparent solid border lc rgb "black"

set xlabel "$xLabel (a.u.)" font "Serif,13"
set ylabel "Frequency" font "Serif,13"

set tics front
set xtics rotate by -45
set format y "%.1f"

EOF

	nItems=`grep "# " .rawData-$$ | wc -l`
	labels=( `grep "# " .rawData-$$ | gawk '{print $2}'` )
	maxJ=( `grep "# " .rawData-$$ | gawk '{print $3}'` )
	
	for (( i=0; i<$nItems; i++ ))
	do
			echo "set title '${labels[$i]}' font 'Serif,14'" >> .plotJ-$$
			echo "plot [-0.05*${maxJ[$i]}:1.05*${maxJ[$i]}] [-0.05:1.05] \\" >> .plotJ-$$
# 			echo "plot [-8:160.0+8] [-0.05:1.05] \\" >> .plotJ-$$
			echo "'.rawData-$$' i $i u 1:2 w boxes lw 0.8, \\" >> .plotJ-$$
			echo "'.rawData-$$' i $i u 1:2:(1e-3) smooth acsplines w l lw 2.5" >> .plotJ-$$
			echo "pause -1" >> .plotJ-$$
	done
	
	cp .rawData-$$ $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotJ-$$
	
	rm .rawData-$$ .plotJ-$$
}

####################################
#
####################################
function speciesDiagram()
{
	local iFile=$1
	local maxPForDetails=$2
	
	if [ -z "$maxPForDetails" ]
	then
		maxPForDetails=0.01
	fi
	
	nExp=`gawk 'BEGIN{n=0}{if(NF>n) n++}END{print n-4}' $iFile`
# 	nExp=`gawk '($1~/#/ && $2~/aver/){print NF-4; exit}' $iFile`
	
	cp $iFile .dataC-$$
	
	############################################
	# Plot species
	############################################
	sed -i -r '{s/(_)([[:digit:]]+)/_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	
	cat > .plotC-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
set xtics rotate by -70 left font "Helvetica Bold,10" 
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
set title "Species distribution"

set size 1.0,0.9
set origin 0.0,0.1

plot $M3C_PLOT_XRANGE [0:] \
'.dataC-$$' i 2 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

pause -1
EOF
	
	cp .dataC-$$ $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotC-$$
	
	############################################
	# Plot species with details
	############################################
	gawk '{if($'$(($nExp+2))'>'$maxPForDetails' || $0~/^[[:blank:]]*$/) print $0}' $iFile > .dataC-$$ # Se filtran los datos para P>maxPForDetails
	sed -i -r '{s/(_)([[:digit:]]+)/@_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	sed -i -r '{s/[[:digit:]]+://g}' .dataC-$$ # Eliminar el identificador de los clusters
	sed -i -r '{s/(\()([[:digit:],]+)(\))/^{\2}/g}' .dataC-$$ # Poner carga, espin y geometria como superindice
	sed -i -r '{s/,//g}' .dataC-$$ # Eliminar las comas entre carga, espin y geometria
	
	cat > .plotC-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
set xtics rotate by -70 left font "Helvetica Bold,10" 
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
set title "Species distribution (P>`echo "scale=1;$maxPForDetails*100.0" | bc -l`)"

set size 1.0,0.9
set origin 0.0,0.1

plot $M3C_PLOT_XRANGE [0:] \
'.dataC-$$' i 3 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

pause -1
EOF
	
	cp .dataC-$$ $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotC-$$
	
	rm .dataC-$$ .plotC-$$
}

####################################
#
####################################
function channelsDiagram()
{
	local iFile=$1
	local maxPForDetails=$2
	
	if [ -z "$maxPForDetails" ]
	then
		maxPForDetails=0.01
	fi
	
	nExp=`gawk 'BEGIN{n=0}{if(NF>n) n++}END{print n-4}' $iFile`
# 	nExp=`gawk '($1~/#/ && $2~/aver/){print NF-4; exit}' $iFile`
	
	cp $iFile .dataC-$$
	
	############################################
	# Plot channels
	############################################
	sed -i -r '{s/(_)([[:digit:]]+)/_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	
	cat > .plotC-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
set xtics rotate by -70 left font "Helvetica Bold,10" 
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
# set title "Channels distribution"

set size 1.0,0.9
set origin 0.0,0.1

plot $M3C_PLOT_XRANGE [0:] \
'.dataC-$$' i 0 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

pause -1
EOF
	
	cp .dataC-$$ $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotC-$$
	
	############################################
	# Plot channels with details
	############################################
	gawk '{if($'$(($nExp+2))'>'$maxPForDetails' || $0~/^[[:blank:]]*$/) print $0}' $iFile > .dataC-$$ # Se filtran los datos para P>maxPForDetails
	sed -i -r '{s/(_)([[:digit:]]+)/@_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	sed -i -r '{s/[[:digit:]]+://g}' .dataC-$$ # Eliminar el identificador de los clusters
	sed -i -r '{s/(\()([[:digit:],]+)(\))/^{\2}/g}' .dataC-$$ # Poner carga, espin y geometria como superindice
	sed -i -r '{s/,//g}' .dataC-$$ # Eliminar las comas entre carga, espin y geometria
	
	cat > .plotC-$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
set xtics rotate by -70 left font "Helvetica Bold,10" 
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
set title "Channels distribution (P>`echo "scale=1;$maxPForDetails*100.0" | bc -l`)"

set size 1.0,0.9
set origin 0.0,0.1

plot $M3C_PLOT_XRANGE [0:] \
'.dataC-$$' i 1 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

pause -1
EOF
	
	cp .dataC-$$ $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotC-$$
	
	rm .dataC-$$ .plotC-$$
}

####################################
#
####################################
function reactionsDiagram()
{
	local iFile=$1
	local withDetails=$2
	local maxP=$3
	
	if [ -z "$maxP" ]
	then
		maxP=0.0
	fi
	
	local targetBlock=0
	if [ "$withDetails" = "FALSE" ]
	then
		targetBlock=0
	elif [ "$withDetails" = "TRUE" ]
	then
		targetBlock=2
	fi
	
	echo "strict digraph G {" > .dataReac-$$.dot
	echo "	rankdir=LR" >> .dataReac-$$.dot
	echo "	node [shape=box,style=filled,fillcolor=yellow,color=black]" >> .dataReac-$$.dot
	
	gawk '
		BEGIN{
			loc=0
			nBlock=0
			targetBlock='$targetBlock'   # @todo El primer bloque es 0 y el segundo 2. Este algoritmo funciona, pero posiblemente hay que repensarlo
		}
		{
			if($0~/Transition statistics/)
				loc=1
				
			if($0~/^[[:blank:]]+$/ && nBlock>=targetBlock)
				loc=0
				
			if($1!~/#/ && loc==1 && nBlock==targetBlock && $1>'$maxP')
				print $0
				
			if(loc==1 && $0~/^[[:blank:]]+$/)
				nBlock+=1
		}
	' $iFile | sed 's/-->/"->"/g' \
	| gawk '
		{
			print "\""$2"\"", "[label="$1",fontcolor=blue]"
		}
	' >> .dataReac-$$.dot
	
	echo "}" >> .dataReac-$$.dot
	
	if [ -n "`which dot`" ]
	then
		dot -Tpng .dataReac-$$.dot > reactions.png
	else
		echo "### ERROR ### dot command is not available. Please install graphviz"
		echo "              sudo apt-get install graphviz"
		exit
	fi
	
	rm .dataReac-$$.dot
	
	if [ -n "$DISPLAY" ]
	then
		gwenview reactions.png > /dev/null 2>&1 &
	fi
}

####################################
#
####################################
function showSparseMatrix()
{
	local iFile=$1
	local keys=$2
	local normalize=$3
	
	[ -z "$normalize" ] && normalize="FALSE"
	
	grep -E "$FILTER" $iFile | \
		gawk '
		BEGIN{
			FS="#"
		}
		
		{
			iVec[$1]=1
			jVec[$2]=1
			values[$1","$2]=$3
		}
		
		END{
			for(i in iVec){
				printf "%15.5f", i
				
				if( "'$normalize'" == "TRUE" ){
					sum=0.0
					for(j in jVec){
						if( i","j in values ){
							split( values[i","j], arr, ":" )
							sum += arr[1]
						}
					}
				}
				
				for(j in jVec){
					if( i","j in values ){
						split( values[i","j], arr, ":" )
						
						if( "'$normalize'" == "TRUE" )
							printf "   %15.5f%15.5f   ", arr[1]/sum, arr[2]
						else
							printf "   %15.5f%15.5f   ", arr[1], arr[2]
					}else{
						printf "   %15.5f%15.5f   ", 0.0, 0.0
					}
				}
				printf "\n"
			}
			
			for(j in jVec){
				print j >> ".keys'$$'"
			}
		}
		' | sort -k 1 -n
	
	if [ -n "$keys" ]
	then
		mv .keys$$ $keys
	else
		rm .keys$$
	fi
}

####################################
#
####################################
function energyDiagram()
{
	local energyDir=$1
	local type=$2
	local normalize=$3
	
	local filter="*.eblkC"
	case $type in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	xMin=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | head -n1`
	xMax=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | tail -n1`
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat $normalize > matrix.data
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
	cp keys.dat tmp-$$
	gawk '
# 	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
	'"`cat $M3C_HOME/utils/M3CUtils.gawk`"'   # Debería ser la anterior linea, pero solo está disponible para gawk >= 2011
	{
		print reduceM3CLabel($1)
	}' tmp-$$ | sed '{s/\([CFS]\)\([0-9]\)/\1_\2/g}' > keys.dat
# 	}' tmp-$$ | sed '{s/\([CFS]\)\([0-9]\)/\1_\2/g;s/p/^{+}/g}' > keys.dat
	rm tmp-$$

	sed -i -r '{s/(_)([[:digit:]]+)pp/@_{\2}^{2+}/g}' keys.dat  # Escribir bien los superindices, caso C_2pp(??)
	sed -i -r '{s/([[:alpha:]]+)pp/\1^{2+}/g}' keys.dat  # Escribir bien los superindices, caso Cpp(??)
	sed -i -r '{s/(_)([[:digit:]]+)p/@_{\2}^{+}/g}' keys.dat  # Escribir bien los superindices, caso C_2p(??)
	sed -i -r '{s/([[:alpha:]]+)p/\1^{+}/g}' keys.dat  # Escribir bien los superindices, caso Cp(??)
	sed -i -r '{s/(_)([[:digit:]]+)/_{\2}/g}' keys.dat  # Escribir bien los superindices, caso C_2(??)
	
	if [ "$type" = "Cd.vs.E" -o "$type" = "Sd.vs.E" ]
	then
		sed -i -r '{s/(\()([[:digit:],]+)(\))/^{\2}/g}' keys.dat # Poner carga, espin y geometria como superindice << @todo No lo entiendo
		sed -i -r '{s/,//g}' keys.dat # Eliminar las comas entre carga, espin y geometria
	fi
	
	keys=( `cat keys.dat` )
	
	nChannels=`head -n1 matrix.data | wc -w`
	nChannels=$(( ($nChannels-1)/2 )) # Se le resta la columna de la energía que es la primera. Dividido en 2 por que hay aver y desv
	
	rm keys.dat

	cat > .plotMtj-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set format x "%.1f"
set format y "%.0f"
set xlabel "Internal Energy (eV)" font "Serif,13"
set ylabel "Probability (%)" font "Serif,13"
set xtics font "Helvetica Bold,9"
set ytics font "Helvetica Bold,9"
set key out right bottom font "Helvetica Bold,8" Right spacing 1.0
set mxtics 5
set mytics 5
# set grid y front
set size $M3C_PLOT_SIZE

# line styles
set style line 1 lt 1 lc rgb '#E41A1C' # red
set style line 2 lt 1 lc rgb '#377EB8' # blue
set style line 3 lt 1 lc rgb '#984EA3' # purple
set style line 4 lt 1 lc rgb 'dark-blue' # 
set style line 5 lt 1 lc rgb 'gray50' #
set style line 6 lt 1 lc rgb '#4DAF4A' # green
set style line 7 lt 1 lc rgb '#FF7F00' # orange
set style line 8 lt 1 lc rgb '#F781BF' # pink
set style line 9 lt 1 lc rgb '#004488' #

set style line 10 lt 1 lc rgbcolor "#004488"
set style line 11 lt 1 lc rgbcolor "#888800"
set style line 12 lt 1 lc rgbcolor "#008888"
# set style line 13 lt 1 lc rgbcolor "#880088"
set style line 14 lt 1 lc rgbcolor "#880000"
set style line 15 lt 1 lc rgb "orange"
# set style line 16 lt 1 lc rgb "dark-olivegreen"
# set style line 17 lt 1 lc rgb "orange"
set style line 24 lt 1 lc rgb "orange"  # Cambia al amarillo

set y2range [-3:103.0]
EOF
	if [ "$M3C_PLOT_XRANGE" = "[:]" ]
	then
		echo "plot [$xMin-($xMax-$xMin)*0.03:$xMax+($xMax-$xMin)*0.03] [-3:103] \\" >> .plotMtj-$iFile$$
	else
		echo "plot $M3C_PLOT_XRANGE [-3:103] \\" >> .plotMtj-$iFile$$
	fi
	
	####################################################
	# Visualization of deposited energy function
	#---------------------------------------------------
	eDistFile=`getValueFromIFIle ../${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:eDistfile"`
	
	if [ -z "$eDistFile" ]
	then
		eDistFile=`getValueFromIFIle ../${iFile%.*}.m3c "BRANCHING_RATIOS:eDistOFile"`
	fi
	
	if [ -f "../$eDistFile" ]
	then
	y2Max=`gawk '{printf "%15.6f%15.6f\n",$1,$2}' ../$eDistFile | sort -k 2 -n | tail -n1 | gawk '{print $2}'`
	
cat >> .plotMtj-$iFile$$ << EOF
"../$eDistFile" u 1:(100*\$2/$y2Max) axis x1y2 notitle smooth cspline w l ls 0 lw 2 lc rgb "gray60", \\
"../$eDistFile" u 1:(100*\$2/$y2Max) axis x1y2 notitle smooth cspline w filledcurve y2 ls 0 lc rgb "gray90", \\
EOF
	fi
	####################################################
	
	for (( i=1; i<=$nChannels; i++ ))
	do
		yCol="(\$$(( 2*$i ))*100)"
		errCol="(\$$(( 2*$i+1 ))*100)"
		smoothCol="(abs(\$$(( 2*$i+1 ))))"
		
# 		if (( $i != $nChannels ))
# 		then
# # 			echo "'matrix.data' u 1:$yCol:$smoothCol smooth unique notitle w l ls $i lw $M3C_PLOT_LW, \\" >> .plotMtj-$iFile$$
# 			echo "'matrix.data' u 1:$yCol:(4e2/abs(1e-4+$errCol)) smooth acsplines notitle w l ls $i lw $M3C_PLOT_LW, \\" >> .plotMtj-$iFile$$
# 			if (( $i>3 ))
# 			then
# # 				echo "'matrix.data' u 1:$yCol:$errCol notitle w yerrorbars ls $i pt $i ps $M3C_PLOT_LW/2.9 lw 0.3*$M3C_PLOT_LW/2.0, \\" >> .plotMtj-$iFile$$
# 				echo "'matrix.data' u 1:$yCol:$errCol notitle w yerrorbars ls $i pt $i ps 0 lw 0.5*$M3C_PLOT_LW/2.0, \\" >> .plotMtj-$iFile$$
# 			else
# # 				echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt $i ps $M3C_PLOT_LW/2.9 lw 0.3*$M3C_PLOT_LW/2.0, \\" >> .plotMtj-$iFile$$
# 				echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt $i ps 0 lw 0.5*$M3C_PLOT_LW/2.0, \\" >> .plotMtj-$iFile$$
# 			fi
# 
# # 			echo "'matrix.data' u 1:$yCol notitle w p pt $i ps $M3C_PLOT_LW/20.0 lc rgb 'white', \\" >> .plotMtj-$iFile$$
# 		else
# # 			echo "'matrix.data' u 1:$yCol:$smoothCol smooth unique notitle w l ls $i lw $M3C_PLOT_LW, \\" >> .plotMtj-$iFile$$
# 			echo "'matrix.data' u 1:$yCol:(4e2/abs(1e-4+$errCol)) smooth acsplines notitle w l ls $i lw $M3C_PLOT_LW, \\" >> .plotMtj-$iFile$$
# 			
# # 			echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt $i ps $M3C_PLOT_LW/2.9 lw 0.3*$M3C_PLOT_LW/2.0" >> .plotMtj-$iFile$$
# 			echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt $i ps 0 lw 0.5*$M3C_PLOT_LW/2.0" >> .plotMtj-$iFile$$
# # 			echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt $i ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW/2.0, \\" >> .plotMtj-$iFile$$
# # 			echo "'matrix.data' u 1:$yCol notitle w p pt $i ps $M3C_PLOT_LW/20.0 lc rgb 'white'" >> .plotMtj-$iFile$$
# 		fi

		if (( $i != $nChannels ))
		then
			echo "'matrix.data' u 1:$yCol:$smoothCol smooth unique notitle w l ls $i lw $M3C_PLOT_LW, \\" >> .plotMtj-$iFile$$
			echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt $i ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW/2.0, \\" >> .plotMtj-$iFile$$
		else
			echo "'matrix.data' u 1:$yCol:$smoothCol smooth unique notitle w l ls $i lw $M3C_PLOT_LW, \\" >> .plotMtj-$iFile$$
			echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt $i ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW/2.0" >> .plotMtj-$iFile$$
		fi
	done
	
	echo "pause -1" >> .plotMtj-$iFile$$
	
	cp matrix.data $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotMtj-$iFile$$
	
	rm .plotMtj-$iFile$$ matrix.data
	
	popd > /dev/null 2> /dev/null
}

####################################
#
####################################
function energyComponentsDiagram()
{
	local iFile=$1
	local energyDir=$2
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	for f in `ls E_*.histogram`
	do
		energy=`echo ${f%.*} | sed 's/E_//g'`
		
		grep "Energy components (eV)" -A7 $f | tail -n4 | awk 'BEGIN{printf "%10.5f",'$energy'}{printf "%10.5f%10.5f",$(NF-1),$NF}END{print ""}'
	
	done | sort -k1 -n > ecompTable$$.dat
	
	popd > /dev/null 2> /dev/null
	
	cat > .plotEComp-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
set key out bottom

set xlabel "Internal Energy (eV)" font "Serif,13"
set ylabel "Energy (eV)" font "Serif,13"

plot $M3C_PLOT_XRANGE \
"$energyDir/ecompTable$$.dat" u 1:2 t "trans" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 1, \
"" u 1:2:3 notitle w yerrorbars lt 1 ps 0, \
"" u 1:2 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:4 t "inter" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 2, \
"" u 1:4:5 notitle w yerrorbars lt 2 ps 0, \
"" u 1:4 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:6 t "vib" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 3, \
"" u 1:6:7 notitle w yerrorbars lt 3 ps 0, \
"" u 1:6 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:8 t "rot" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 4, \
"" u 1:8:9 notitle w yerrorbars lt 4ps 0, \
"" u 1:8 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white"

pause -1
EOF
	
	cp $energyDir/ecompTable$$.dat $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotEComp-$iFile$$ 2> /dev/null
	
	rm $energyDir/ecompTable$$.dat
	rm .plotEComp-$iFile$$
}

####################################
#
####################################
function energyComponentsPercentageDiagram()
{
	local iFile=$1
	local energyDir=$2
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	for f in `ls E_*.histogram`
	do
		energy=`echo ${f%.*} | sed 's/E_//g'`
		
		grep "Energy components (eV)" -A7 $f | tail -n4 | awk 'BEGIN{printf "%10.5f",'$energy'}{printf "%10.5f%10.5f",$(NF-1),$NF}END{print ""}'
	
	done | sort -k1 -n > ecompTable$$.dat
	
	popd > /dev/null 2> /dev/null
	
	cat > .plotEComp-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
set key out bottom

set xlabel "Internal Energy (eV)" font "Serif,13"
set ylabel "Percentage (%)" font "Serif,13"
set format y "%.0f"
set logscale y

fixValue(x) = ( 100*x<0.0 ? 0.0 : ( 100*x>100.0 ? 100.0 : 100*x ))

plot $M3C_PLOT_XRANGE [1:100] \
"$energyDir/ecompTable$$.dat" u 1:(fixValue(\$2/(\$2+\$4+\$6+\$8))) t "trans" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 1, \
"" u 1:(fixValue(\$2/(\$2+\$4+\$6+\$8))):(fixValue(\$3/(\$2+\$4+\$6+\$8))) notitle w yerrorbars lt 1 ps 0, \
"" u 1:(fixValue(\$2/(\$2+\$4+\$6+\$8))) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:(fixValue(\$4/(\$2+\$4+\$6+\$8))) t "inter" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 2, \
"" u 1:(fixValue(\$4/(\$2+\$4+\$6+\$8))):(fixValue(\$5/(\$2+\$4+\$6+\$8))) notitle w yerrorbars lt 2 ps 0, \
"" u 1:(fixValue(\$4/(\$2+\$4+\$6+\$8))) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:(fixValue(\$6/(\$2+\$4+\$6+\$8))) t "vib" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 3, \
"" u 1:(fixValue(\$6/(\$2+\$4+\$6+\$8))):(fixValue(\$7/(\$2+\$4+\$6+\$8))) notitle w yerrorbars lt 3 ps 0, \
"" u 1:(fixValue(\$6/(\$2+\$4+\$6+\$8))) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:(fixValue(\$8/(\$2+\$4+\$6+\$8))) t "rot" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 4, \
"" u 1:(fixValue(\$8/(\$2+\$4+\$6+\$8))):(fixValue(\$9/(\$2+\$4+\$6+\$8))) notitle w yerrorbars lt 4ps 0, \
"" u 1:(fixValue(\$8/(\$2+\$4+\$6+\$8))) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white"

pause -1
EOF
	
	cp $energyDir/ecompTable$$.dat $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotEComp-$iFile$$ 2> /dev/null
	
	rm $energyDir/ecompTable$$.dat
	rm .plotEComp-$iFile$$
}

####################################
#
####################################
function weightComponentsDiagram()
{
	local iFile=$1
	local energyDir=$2
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	for f in `ls E_*.histogram`
	do
		energy=`echo ${f%.*} | sed 's/E_//g'`
		
		grep "Weight components (arb.)" -A9 $f | tail -n6 | awk 'BEGIN{printf "%10.5f",'$energy'}{printf "%10.5f%10.5f",$(NF-1),$NF}END{print ""}'
	
	done | sort -k1 -n > ecompTable$$.dat
	
	popd > /dev/null 2> /dev/null
	
	cat > .plotEComp-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
set key out bottom

set xlabel "Internal Energy (eV)" font "Serif,13"
set ylabel "LnW (arb.)" font "Serif,13"

plot $M3C_PLOT_XRANGE \
"$energyDir/ecompTable$$.dat" u 1:2 t "LnWe" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 1, \
"" u 1:2:3 notitle w yerrorbars lt 1 ps 0, \
"" u 1:2 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:4 t "LnWv" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 2, \
"" u 1:4:5 notitle w yerrorbars lt 2 ps 0, \
"" u 1:4 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:6 t "LnWn" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 3, \
"" u 1:6:7 notitle w yerrorbars lt 3 ps 0, \
"" u 1:6 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:8 t "LnWr" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 4, \
"" u 1:8:9 notitle w yerrorbars lt 4 ps 0, \
"" u 1:8 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:10 t "LnWt" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 5, \
"" u 1:10:11 notitle w yerrorbars lt 5 ps 0, \
"" u 1:10 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:12 t "LnW" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lc rgb "black", \
"" u 1:12:13 notitle w yerrorbars ps 0 lc rgb "black", \
"" u 1:12 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white"

pause -1
EOF
	
	cp $energyDir/ecompTable$$.dat $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotEComp-$iFile$$ 2> /dev/null
	
	rm $energyDir/ecompTable$$.dat
	rm .plotEComp-$iFile$$
}

####################################
#
####################################
function weightComponentsPercentageDiagram()
{
	local iFile=$1
	local energyDir=$2
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	for f in `ls E_*.histogram`
	do
		energy=`echo ${f%.*} | sed 's/E_//g'`
		
		grep "Weight components (arb.)" -A9 $f | tail -n6 | awk 'BEGIN{printf "%10.5f",'$energy'}{printf "%10.5f%10.5f",$(NF-1),$NF}END{print ""}'
	
	done | sort -k1 -n > ecompTable$$.dat
	
	popd > /dev/null 2> /dev/null
	
	cat > .plotEComp-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
set key out bottom

set xlabel "Internal Energy (eV)" font "Serif,13"
set ylabel "Percentage (%)" font "Serif,13"
set format y "%.0f"

fixValue(x) = ( 100*x<0.0 ? 0.0 : ( 100*x>100.0 ? 100.0 : 100*x ))

plot $M3C_PLOT_XRANGE [-2:102] \
"$energyDir/ecompTable$$.dat" u 1:(fixValue(\$2/\$12)) t "LnWe" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 1, \
"" u 1:(fixValue(\$2/\$12)):(fixValue(\$3/\$12)) notitle w yerrorbars lt 1 ps 0, \
"" u 1:(fixValue(\$2/\$12)) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:(fixValue(\$4/\$12)) t "LnWv" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 2, \
"" u 1:(fixValue(\$4/\$12)):(fixValue(\$5/\$12)) notitle w yerrorbars lt 2 ps 0, \
"" u 1:(fixValue(\$4/\$12)) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:(fixValue(\$6/\$12)) t "LnWn" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 3, \
"" u 1:(fixValue(\$6/\$12)):(fixValue(\$7/\$12)) notitle w yerrorbars lt 3 ps 0, \
"" u 1:(fixValue(\$6/\$12)) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:(fixValue(\$8/\$12)) t "LnWr" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 4, \
"" u 1:(fixValue(\$8/\$12)):(fixValue(\$9/\$12)) notitle w yerrorbars lt 4 ps 0, \
"" u 1:(fixValue(\$8/\$12)) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
"" u 1:(fixValue(\$10/\$12)) t "LnWt" w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 5, \
"" u 1:(fixValue(\$10/\$12)):(fixValue(\$9/\$12)) notitle w yerrorbars lt 5 ps 0, \
"" u 1:(fixValue(\$10/\$12)) notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white"

pause -1
EOF
	
	cp $energyDir/ecompTable$$.dat $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotEComp-$iFile$$ 2> /dev/null
	
	rm $energyDir/ecompTable$$.dat
	rm .plotEComp-$iFile$$
}

####################################
#
####################################
function temperatureDiagram()
{
	local iFile=$1
	local energyDir=$2
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	for f in `ls E_*.histogram`
	do
		energy=`echo ${f%.*} | sed 's/E_//g'`
		
		grep "Temperature" -A4 $f | tail -n1 | awk 'BEGIN{printf "%10.5f",'$energy'}{printf "%10.5f%10.5f",$(NF-1),$NF}END{print ""}'
	
	done | sort -k1 -n > temperatureTable$$.dat
	
	popd > /dev/null 2> /dev/null
	
	cat > .plotTemperature-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
unset key

# set format y "%.1f"
set xlabel "Internal Energy (eV)" font "Serif,13"
set ylabel "Temperature (eV)" font "Serif,13"

plot $M3C_PLOT_XRANGE [:] \
"$energyDir/temperatureTable$$.dat" u 1:2 w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 1, \
"" u 1:2:3 notitle w yerrorbars lt 1 ps 0, \
"" u 1:2 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white"

# sw(x,S)=1/(x*x*S)
# plot [-0.45:-0.2] [0.0005:0.0045] \
# "$energyDir/temperatureTable$$.dat" u 1:2 w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 1, \
# "" u 1:2:3 notitle w yerrorbars lt 1 ps 0, \
# "" u 1:2 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
# "" u 1:2:(sw(\$3+0.00001,1000)) smooth acsplines w l lt 3


# #==============================================================
# # Todo este bloque es temporal
# #--------------------------------------------------------------
# Jval=int(`awk '($1=="totalJ"){print $3}' $iFile`/LJ_j)
# 
# param=( (Jval==0)? 0.0001 : (Jval==8) ? 0.00005 : (Jval==11) ? 0.00001 : 0.0001 )
# print Jval, param
# set table
# set output "table.dat"
# sw(x,S)=1/(x*x*S)
# plot \
# "< awk '(\$2>0.0004){print \$0}' $energyDir/temperatureTable$$.dat" u 1:2:(sw(\$3+param,3000)) smooth acsplines w l lt 3  # OK L=12
# 
# # "< awk '(\$2>0.0004){print \$0}' $energyDir/temperatureTable$$.dat" u 1:2:(sw(\$3+0.00004,3000)) smooth acsplines w l lt 3  # OK L=12
# # "< awk '(\$2>0.0004){print \$0}' $energyDir/temperatureTable$$.dat" u 1:2:(sw(\$3+0.0001,3000)) smooth acsplines w l lt 3  # OK L=0
# # "< awk '(\$2>0.0004){print \$0}' $energyDir/temperatureTable$$.dat" u 1:2:(sw(\$3+0.00005,3000)) smooth acsplines w l lt 3  # OK L=8
# # "$energyDir/temperatureTable$$.dat" u 1:2:(sw(\$3+0.0001,3000)) smooth acsplines w l lt 3
# unset table
# unset output
# 
# ! n1df.derivative -i table.dat -c 2,1 -o dtable.dat -s 10
# 
# set xlabel "Temperature (eV)" font "Serif,13"
# set ylabel "Internal Energy (eV)" font "Serif,13"
# set y2label "Heat Capacity per atom" font "Serif,13"
# set xtics rotate by -45
# set ytics nomirror
# set y2tics nomirror
# # "$energyDir/temperatureTable$$.dat" u 2:1 w lp pt 7 ps $M3C_PLOT_LW/2.9 lw $M3C_PLOT_LW lt 1, \
# 
# # set y2range [2:18]
# # plot [0.0005:0.0045] [-0.45:-0.2] \
# # "< awk '(\$2>0.0004){print \$0}' $energyDir/temperatureTable$$.dat" u 2:1 w p pt 7 ps $M3C_PLOT_LW/2.9 lw 0.3 lt 1, \
# # "" u 2:1:3 notitle w xerrorbars lt 1 ps 0, \
# # "" u 2:1 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
# # "dtable.dat" u 1:(\$2/13.0) axis x1y2 w l lc rgb "blue" lw 2, \
# # "table.dat" u 2:1 w l lc rgb "forest-green" lw 2, \
# # "Jellinek.dat" i 0 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 7 lc rgb "black", \
# # "Jellinek.dat" i 0 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 7 ps 0.4 lc rgb "white", \
# # "Jellinek.dat" i 1 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 7 lc rgb "black", \
# # "Jellinek.dat" i 2 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 9 ps 1.0 lc rgb "black", \
# # "Jellinek.dat" i 2 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 9 ps 0.4 lc rgb "white"
# 
# set xlabel "Temperature (eV)" font "Serif,13"
# set ylabel "Internal Energy (eV)" font "Serif,13"
# set ytics mirror
# unset y2tics
# unset y2label
# set format y "%.2f"
# 
# plot [0.0005:0.0045] [-0.45:-0.2] \
# "< awk '(\$2>0.0004){print \$0}' $energyDir/temperatureTable$$.dat" u 2:1 w p pt 7 ps $M3C_PLOT_LW/2.9 lw 0.3 lt 1, \
# "" u 2:1:3 notitle w xerrorbars lt 1 ps 0, \
# "" u 2:1 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
# "table.dat" u 2:1 w l lc rgb "blue" lw 2, \
# "Jellinek.dat" i 0 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 7 ps 1.3 lc rgb "black", \
# "Jellinek.dat" i 0 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 7 ps 0.6 lc rgb "white", \
# "Jellinek.dat" i 1 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 7 ps 1.3 lc rgb "black"
# 
# 
# # "Jellinek.dat" i 2 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 9 ps 1.0 lc rgb "black", \
# # "Jellinek.dat" i 2 u (\$2*K/eV):(\$1*erg*10**(-14)*13/eV) w p pt 9 ps 0.4 lc rgb "white"
# 
# pause -1
# 
# set ytics nomirror
# set y2tics nomirror
# set xlabel "Temperature (eV)" font "Serif,13"
# set ylabel "Internal Energy (eV)" font "Serif,13"
# set y2label "Heat Capacity per atom" font "Serif,13"
# 
# set y2range [2:16]
# plot [0.0005:0.0045] [-0.45:-0.2] \
# "< awk '(\$2>0.0004){print \$0}' $energyDir/temperatureTable$$.dat" u 2:1 w p pt 7 ps $M3C_PLOT_LW/2.9 lw 0.3 lt 1 lc rgb "gray80", \
# "" u 2:1:3 notitle w xerrorbars lt 1 ps 0 lc rgb "gray80", \
# "" u 2:1 notitle w p pt 7 ps $M3C_PLOT_LW/20.0 lc rgb "white", \
# "table.dat" u 2:1 w l lc rgb "gray80" lw 2, \
# "dtable.dat" u 1:(\$2/13.0) axis x1y2 w l lc rgb "blue" lw 2
# 
# #==============================================================

pause -1
EOF
	
	cp $energyDir/temperatureTable$$.dat $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotTemperature-$iFile$$ #2> /dev/null
	
	rm $energyDir/temperatureTable$$.dat
	rm .plotTemperature-$iFile$$
}

####################################
#
####################################
function channelBRDiagram()
{
	local iFile=$1
	local energyDir=$2
	local diagram=$3
	local normalize=$4
	
	local BRFile=`getValueFromIFIle ${iFile%.*}.m3c "BRANCHING_RATIOS:BRfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	local filter="*.eblkC"
	case $diagram in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat $normalize > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nChannels=`cat keys.dat | wc -w`
	nChannels=$(( $nChannels-1 ))
	
	M3CBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
	cp $BRFile tmp-$$
	gawk '
# 	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
	'"`cat $M3C_HOME/utils/M3CUtils.gawk`"'   # Debería ser la anterior linea, pero solo está disponible para gawk >= 2011
	($1!~/^#/){
		print reduceM3CLabel($1), $2, $3, $4
	}' tmp-$$ > $BRFile
	rm tmp-$$
	
	# @todo Estas son las lineas buenas para actualizar los otros sitios que tengan manejo de subindices
	sed -i -r '{s/([[:alpha:]]+)([[:digit:]]+)pp/\1@_{\2}^{2+}/g}' $BRFile  # Escribir bien los superindices, caso C_2pp(??)
	sed -i -r '{s/([[:alpha:]]+)pp/\1^{2+}/g}' $BRFile  # Escribir bien los superindices, caso Cpp(??)
	sed -i -r '{s/([[:alpha:]]+)([[:digit:]]+)p/\1@_{\2}^{+}/g}' $BRFile  # Escribir bien los superindices, caso C_2p(??)
	sed -i -r '{s/([[:alpha:]]+)p/\1^{+}/g}' $BRFile  # Escribir bien los superindices, caso Cp(??)
	sed -i -r '{s/([[:alpha:]]+)([[:digit:]]+)/\1_{\2}/g}' $BRFile  # Escribir bien los superindices, caso C_2(??)
	
	yMax=`gawk '($0!~/#/){printf "%s\n%s\n",$2,$3}' $BRFile | sort -k 1 -n | tail -n1`
	
	cat > .plotBR-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
# set size 0.9,1.0
set ylabel "Branching Ratio (%)" font "Serif,13"
set format y "%.0f"
# set key out left bottom
#set key left
set xtics font "Helvetica Bold,9" rotate by -45
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10"

set mytics 5
# set grid y

# plot [-$nChannels*0.1:$nChannels*1.1] [-$yMax*0.1:$yMax*1.1] \
# "$BRFile" u :3:4 t "experimental" w yerrorbars pt 7 lt 3, \
# "" u :3:4 notitle w l lt 0 lw 2 lc rgb "blue", \
# "" u :2:xtic(1) t "theoretical" w lp ps 1.0 pt 4 lt 0 lw 2 lc rgb "red"

set style fill transparent pattern 7 bo
plot [-1.5:$nChannels+1.5] [-$yMax*0.1:$yMax*1.1] \
"$BRFile" u :2:(0.5):xtic(1) t "Theo." w boxes lt 1 lw 1.0 lc rgb "red", \
"" u :3:(0.8) notitle w boxes lt 1 lw 1.5 lc rgb "black", \
"" u :3:4 t "Exp." w yerrorbars pt 7 ps 0.5 lw 2.0 lc rgb "black"

pause -1
EOF
	
	cp $BRFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotBR-$iFile$$ 2> /dev/null
	
	rm .plotBR-$iFile$$
}

####################################
#
####################################
function channelFitBRDiagram()
{
	local iFile=$1
	local energyDir=$2
	local diagram=$3
	local normalize=$4
	
	local BRFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:BRfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	local filter="*.eblkC"
	case $diagram in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat $normalize > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
	nChannels=`awk '($0!~/^[[:blank:]]*#.*$/){print $0}' $BRFile | wc -l`
	nChannels=$(( $nChannels-1 ))
	
	cp $BRFile tmp-$$
	gawk '
# 	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
	'"`cat $M3C_HOME/utils/M3CUtils.gawk`"'   # Debería ser la anterior linea, pero solo está disponible para gawk >= 2011
	($1!~/^#/){
		print reduceM3CLabel($1), $2, $3, $4
	}' tmp-$$ > $BRFile
	rm tmp-$$
	
	sed -i -r '{s/([[:alpha:]]+)([[:digit:]]+)pp/\1@_{\2}^{2+}/g}' $BRFile  # Escribir bien los superindices, caso C_2pp(??)
	sed -i -r '{s/([[:alpha:]]+)pp/\1^{2+}/g}' $BRFile  # Escribir bien los superindices, caso Cpp(??)
	sed -i -r '{s/([[:alpha:]]+)([[:digit:]]+)p/\1@_{\2}^{+}/g}' $BRFile  # Escribir bien los superindices, caso C_2p(??)
	sed -i -r '{s/([[:alpha:]]+)p/\1^{+}/g}' $BRFile  # Escribir bien los superindices, caso Cp(??)
	sed -i -r '{s/([[:alpha:]]+)([[:digit:]]+)/\1_{\2}/g}' $BRFile  # Escribir bien los superindices, caso C_2(??)
	
	yMax=`gawk '($0!~/#/){printf "%s\n%s\n",$2,$3}' $BRFile | sort -k 1 -n | tail -n1`
	
	cat > .plotBR-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
# set size 0.9,1.0
set ylabel "Branching Ratio (%)" font "Serif,13"
set format y "%.0f"
# set key out left bottom
#set key left
set xtics font "Helvetica Bold,9" rotate by -45
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10" spacing 1.2

set mytics 5
# set grid y

# plot [-1:$nChannels+1] [-$yMax*0.1:$yMax*1.1] \
# "$BRFile" u :3:4:xtic(1) t "experimental" w yerrorbars pt 7 lt 3, \
# "$BRFile" u :3:4 notitle w l lt 0 lw 2 lc rgb "blue", \
# "$BRFile" u :2 t "theoretical" w lp ps 1.0 pt 4 lt 0 lw 2 lc rgb "red"
# 
# # "$BRFile" u :2 t "theoretical + U(R)" w lp ps 1.0 pt 4 lt 0 lw 2 lc rgb "red"
# #"old.dat" u :2 t "theoretical" w lp ps 2.0 pt 3 lt 0 lw 2 lc rgb "forest-green", \

set style fill transparent pattern 7 bo
plot [-1.5:$nChannels+1.5] [-$yMax*0.1:$yMax*1.1] \
"$BRFile" u :2:(0.5):xtic(1) t "Theo." w boxes lt 1 lw 1.0 lc rgb "red", \
"" u :3:(0.8) notitle w boxes lt 1 lw 1.5 lc rgb "black", \
"" u :3:4 t "Exp." w yerrorbars pt 7 ps 0.5 lw 2.0 lc rgb "black"

pause -1
EOF
	
	cp $BRFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotBR-$iFile$$
	
	rm .plotBR-$iFile$$
}

####################################
#
####################################
function speciesFitBRDiagram()
{
	local iFile=$1
	local energyDir=$2
	local normalize=$3
	
	local BRFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:BRfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls *.eblkS`
	do
		cat $f >> sparseMatrix.dat
	done
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	FILTER="p"
	showSparseMatrix sparseMatrix.dat keys.dat $normalize > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nSpecies=`cat keys.dat | wc -w`
	nSpecies=$(( $nSpecies-1 ))
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
# 	M3CBR -i $iFile -d matrix.dat -k keys.dat
# 	rm matrix.dat keys.dat # <<<<< OJJOJOJ
	
	cp $BRFile tmp-$$
	gawk '
# 	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
	'"`cat $M3C_HOME/utils/M3CUtils.gawk`"'   # Debería ser la anterior linea, pero solo está disponible para gawk >= 2011
	($1!~/^#/){
		print reduceM3CLabel($1), $2, $3, $4
	}' tmp-$$ > $BRFile
	rm tmp-$$
	
	yMax=`gawk '($0!~/#/){printf "%s\n%s\n",$2,$3}' $BRFile | sort -k 1 -n | tail -n1`
	
	cat > .plotBR-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
# set size 0.9,1.0
set xlabel "Channel" font "Serif,13"
set ylabel "Branching ratios (%)" font "Serif,13"
set format y "%.0f"
# set key out left bottom
set key left
set xtics font "Helvetica Bold,9" rotate by -45
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10"

set mytics 5
# set grid y

plot [-$nSpecies*0.1:$nSpecies*1.1] [-$yMax*0.1:$yMax*1.1] \
"$BRFile" u :3:4 t "experimental" w yerrorbars pt 7 lt 3, \
"" u :3:4 notitle w l lt 0 lw 2 lc rgb "blue", \
"" u :2:xtic(1) t "theoretical" w lp ps 1.0 pt 4 lt 0 lw 2 lc rgb "red"

pause -1
EOF
	
	cp $BRFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotBR-$iFile$$
	rm .plotBR-$iFile$$
	
	cp $BRFile .$BRFile-tmp$$
	
	getTableFromIFile $iFile EXPERIMENTAL_BRANCHING_RATIOS | while read line
	do
		key=`echo $line | gawk '{print $1}'`
		mq=`echo $line | gawk '{print $4}'`
		
		sed -i 's/^[\s]*'$key' /'$mq'  '$key' /g' .$BRFile-tmp$$
	done
	
	cat > .plotmqBR-$iFile$$ << EOF
$M3C_PLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size $M3C_PLOT_SIZE
set xlabel "m/z" font "Serif,13"
set ylabel "Relative Intensity" font "Serif,13"
set format y "%.0f"
set xtics font "Helvetica Bold,9"
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10"

# set mxtics 10
# set mytics 5
# set grid y
set mxtics 5

max(a,b) = (a>b)?a:b

set key left

maxI_theo=`sort -k3 -n .$BRFile-tmp$$ | tail -n1 | gawk '{print $3}'`
maxI_exp=`sort -k3 -n .$BRFile-tmp$$ | tail -n1 | gawk '{print $4}'`

plot [0:] [-5:125] \
".$BRFile-tmp$$" u 1:(100*\$4/maxI_exp) t "Experimental" w impulses lt 1 lw 4, \
"" u 1:(100*\$3/maxI_theo) t "Theoretical" w points pt 7 ps 0.9 lc rgb "blue", \
"" u 1:(100*\$3/maxI_theo) notitle w points pt 7 ps 0.3 lc rgb "white", \
"" u (\$1):(100*max(\$3/maxI_theo,\$4/maxI_exp)+5.0):2 notitle w labels left font "Serif,8" rotate by 90

# plot [0:] [-5:105] \
# ".$BRFile-tmp$$" u 1:(100*\$3/maxI_theo) notitle w impulses lt 1 lw 5

pause -1
EOF
	
	cp .$BRFile-tmp$$ $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
	$M3C_GNUPLOT_EXEC .plotmqBR-$iFile$$
	rm .plotmqBR-$iFile$$
	rm .$BRFile-tmp$$
}

####################################
#
####################################
function energyDistDiagram()
{
	local iFile=$1
	local energyDir=$2
	local diagram=$3
	local normalize=$4
	
# 	local eDistFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:eDistfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	local filter="*.eblkC"
	case $diagram in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	xMax=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | tail -n1`
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat $normalize > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters

	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nChannels=`cat keys.dat | wc -w`
	nChannels=$(( $nChannels-1 ))
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
# 	yMax=`gawk '{printf "%15.6f%15.6f\n",$1,$2}' $eDistFile | sort -k 2 -n | tail -n1 | gawk '{print $2}'`
# 	
# 	cat > .plotED-$iFile$$ << EOF
# $M3C_PLOT_TERMINAL
# set termopt enhanced
# set encoding iso_8859_1
# 
# set xlabel "Internal Energy (eV)" font "Serif,13"
# set ylabel "Probability (%)" font "Serif,13"
# set format y "%.0f"
# unset key
# set xtics font "Helvetica Bold,9"
# set ytics font "Helvetica Bold,9"
# 
# set mxtics 5
# set mytics 5
# # set grid
# set size $M3C_PLOT_SIZE
# 
# plot [-$xMax*0.04:$xMax*1.04] [-$yMax*0.04:$yMax*1.04] \
# "$eDistFile" u 1:2 w filledcurve ls 0 lc rgb "gray90", \
# "$eDistFile" u 1:2 w l ls 0 lw 4
# 
# pause -1
# EOF
# 	
# 	cp $eDistFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
# 	$M3C_GNUPLOT_EXEC .plotED-$iFile$$
# 	
# 	rm .plotED-$iFile$$
}

####################################
#
####################################
function speciesEnergyDistDiagram()
{
	local iFile=$1
	local energyDir=$2
	local normalize=$3
	
# 	local eDistFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:eDistfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls *.eblkS`
	do
		cat $f >> sparseMatrix.dat
	done
	
	xMax=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | tail -n1`
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	FILTER="p"
	showSparseMatrix sparseMatrix.dat keys.dat $normalize > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters

	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nSpecies=`cat keys.dat | wc -w`
	nSpecies=$(( $nSpecies-1 ))
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
# 	yMax=`gawk '{printf "%15.6f%15.6f\n",$1,$2}' $eDistFile | sort -k 2 -n | tail -n1 | gawk '{print $2}'`
# 	
# 	cat > .plotED-$iFile$$ << EOF
# $M3C_PLOT_TERMINAL
# set termopt enhanced
# set encoding iso_8859_1
# 
# set xlabel "Internal Energy (eV)" font "Serif,13"
# set ylabel "Probability (%)" font "Serif,13"
# set format y "%.0f"
# unset key
# set xtics font "Helvetica Bold,9"
# set ytics font "Helvetica Bold,9"
# 
# set mxtics 5
# set mytics 5
# # set grid
# set size $M3C_PLOT_SIZE
# 
# plot [-$xMax*0.04:$xMax*1.04] [-$yMax*0.04:$yMax*1.04] \
# "$eDistFile" u 1:2 smooth csplines w l ls 0 lw 4 lc rgb "gray60", \
# "$eDistFile" u 1:2 smooth cspline w filledcurve ls 0 lc rgb "gray90"
# 
# pause -1
# EOF
# 	
# 	cp $eDistFile $LOCAL_DIR/figure.dat # @todo Esto tiene que eliminarse en el futuro y ser habilitado por el usuario a través de un opción como -s
# 	$M3C_GNUPLOT_EXEC .plotED-$iFile$$
# 	
# 	rm .plotED-$iFile$$
}

####################################
#
####################################
function allowedReactionsDiagram()
{
	local iFile=$1
	local details=$2
	local nSteps=$3
	local nExp=$4
	
	sed -r 's/(^[[:blank:]]*)(BEGIN FRAGMENTS_DATABASE[[:blank:]]*$)/\1\2\n\nreactionsAnalysis = TRUE\nreactionsAnalysis.reactor = S:1\nreactionsAnalysis.dotFile = '${iFile%.*}.dot'\nreactionsAnalysis.details = '$details'\nreactionsAnalysis.nSteps = '$nSteps'\nreactionsAnalysis.nExps = '$nExp'/g' $iFile > .tmp$$.m3c
	
	M3C -i .tmp$$.m3c
	
        if [ -n "`which dot`" ]
        then
		echo "Executing:"
		echo "           dot -O -Tpng ${iFile%.*}.dot"
		dot -O -Tpng ${iFile%.*}.dot
	fi
	
        if [ -n "`echo $DISPLAY`" ] 
        then
		if [ -n "`which gwenview`" ]
		then
			echo "Executing:"
			echo "           gwenview ${iFile%.*}.dot.png"
			gwenview ${iFile%.*}.dot.png
		elif [ -n "`which display`" ]
		then
			echo "Executing:"
			echo "           display ${iFile%.*}.dot.png"
			display ${iFile%.*}.dot.png
		fi
        fi
	
	rm .tmp$$.m3c
	
#         reactionsAnalysis = TRUE
#         reactionsAnalysis.reactor = S:1
#         reactionsAnalysis.details = FALSE
#         reactionsAnalysis.nSteps = 10
#         reactionsAnalysis.nExps = 100
}

####################################
#
####################################
function showAvailableEnergies()
{
	local iFile=$1
	
	availableEnergies=( `ls ${iFile%.*}.data/*.inp | sed -r '{s/^.*[/]E_//g; s/.inp//g}' | sort -n` )
	
	printf "%25s\n" "------------------------"
	printf "%25s\n" "available energies"
	printf "%25s\n" "------------------------"
	printf "%10s%15s%15s%15s%15s\n" "id" "energy" "jhistory" "whistory" "histogram"
	printf "\n"
	for (( i=0; i<${#availableEnergies[@]}; i++ ))
	do
		jhist="NONE"
		whist="NONE"
		chann="NONE"
		
		if [ -f "${iFile%.*}.data/E_${availableEnergies[$i]}.jhistory" ]
		then
			jhist="OK"
		fi
		
		if [ -f "${iFile%.*}.data/E_${availableEnergies[$i]}.whistory" ]
		then
			whist="OK"
		fi
		
		if [ -f "${iFile%.*}.data/E_${availableEnergies[$i]}.histogram" ]
		then
			chann="OK"
		fi
		
		printf "%10d%15.5f%15s%15s%15s\n" "$i" "${availableEnergies[$i]}" "$jhist" "$whist" "$chann"
	done
}

####################################
#
####################################
function textbb(){
	echo -n `tput bold`$1`tput sgr0`
}

####################################
#
####################################
function showUsage()
{
cat << EOF
`textbb NAME`
        `textbb M3C.analysis` - Tool for visualize the results generated by M3C program

`textbb SYNOPSYS`
        `textbb M3C.analysis` [ POSIX or GNU style options ]
        
`textbb DESCRIPTION`

`textbb OPTIONS`
        `textbb M3C.analysis` accepts the following options.
        
        `textbb -i` inputFile.m3c
        `textbb --ifile` inputFile.m3c
                bla bla bla bla
                
        `textbb -c` [value]
        `textbb --channels` [value]
                bla bla bla bla. [C|Cd|S|Sd]. See --filter option

        `textbb -s` [value]
        `textbb --species` [value]
                bla bla bla bla. [C|Cd|S|Sd]. See --filter option
                
        `textbb -h` [value]
        `textbb --history` [value]
                bla bla bla bla. [K|V|Ee|Ev|Er]
        
        `textbb -b`
        `textbb --bratio`
                bla bla bla bla
                
        `textbb -h` [value]
        `textbb --histogram` [value]
                bla bla bla bla. [K,V,Ee,Ev,Er,R,J]
                
        `textbb -f` [value]
        `textbb --filter` [value]
                bla bla bla bla
        
        `textbb "energyID { history|species|channels|all }"`
                bla bla bla bla
                
`textbb EXAMPLES`
        
        Show the species diagram as function of the excitation energy with the results obtained
        from the input file example.m3c
                $ M3C.analysis example.m3c S.vs.E
                
        Filtering the results
                $ M3C.analysis example.m3c S.vs.E "C_[23]"
                
                $ M3C.analysis example.m3c Cd.vs.E "[1-9]:C_2\([[:digit:],]+\)[+][1-9]:C_3\([[:digit:],]+\)"
                
                $ M3C.analysis example.m3c Cd.vs.E "[[:digit:]]:C_2\([[:digit:],]+\)[+][[:digit:]]:C_3\([[:digit:],]+\)"
                
        Plotting histrograms for species or channels and history energy for each value of energy
                $ M3C.analysis example.m3c
                ------------------------
                        available energies
                ------------------------
                                id         energy        history      histogram

                                0        0.00000             OK             OK
                                1        1.00000             OK             OK
                                2        2.00000             OK             OK
                                ...
                               29       29.00000             OK             OK
                               30       30.00000             OK             OK
        
                $ M3C.analysis example.m3c 29 channels

`textbb AUTHORS`

`textbb ACKNOWLEDGEMENTS`

`textbb COPYING PERMISSIONS`
       Copyright © 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.

       Permission is granted to make and distribute verbatim copies of this manual page provided the copyright notice and this permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page under the conditions for verbatim copying, provided that the entire resulting derived  work  is
       distributed under the terms of a permission notice identical to this one.

       Permission is granted to copy and distribute translations of this manual page into another language, under the above conditions for modified versions, except that this permission
       notice may be stated in a translation approved by the Foundation.
EOF
}

####################################
#
####################################
function main()
{
	# c:: esto es para argumentos cuyo valor es opcional -c2.3 y argumento largo es c-long:: para --c-long=2.3
	TEMP=`getopt \
		-o i:c:s:h:bh:f:n: \
		--long ifile:,channels:,species:,history:,bratio:,histogram:,filter:,energyID: \
		-n 'M3C.analysis' -- "$@"`

# 	if [ $? != 0 ]
# 	then
# 		echo "Terminating..." >&2
# 		exit 1
# 	fi
# 	
# 	eval set -- "$TEMP"
# 	while true
# 	do
# 		case "$1" in
# 			-a|--a-long)
# 				echo "Option a"
# 				shift
# 				;;
# 			-b|--b-long)
# 				# Este tiene un argumento por eso el shift 2
# 				echo "Option b, argument \`$2'"
# 				shift 2
# 				;;
# 			-c|--c-long) 
# 				# c has an optional argument. As we are in quoted mode,
# 				# an empty parameter will be generated if its optional
# 				# argument is not found.
# 				case "$2" in
# 					"")
# 						echo "Option c, no argument"
# 						shift 2
# 						;;
# 					*)
# 						echo "Option c, argument \`$2'"
# 						shift 2
# 						;;
# 				esac
# 				;;
# 			--)
# 				shift
# 				break
# 				;;
# 			*)
# 				echo "Internal error!"
# 				exit 1
# 				;;
# 		esac
# 	done
# 	exit

	local iFile=$1
	local id=""
	local target=""
	
	if [ -z "$1" ]
	then
		showUsage
		exit
	fi
	
	if [ -z "$2" ]
	then
		showAvailableEnergies $iFile
		exit
	fi
	
	if [[ "$2" =~ ".vs." ]]
	then
		if [ -n "$3" ]
		then
			FILTER="$3"
		fi
		
		energyDiagram "${iFile%.*}.data/" "$2" "$4"
		exit
	fi
	
	if [ "$2" = "Ecomp" ]
	then
		energyComponentsDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
		exit
	fi
	
	if [ "$2" = "Ecomp%" ]
	then
		energyComponentsPercentageDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
		exit
	fi
	
	if [ "$2" = "Wcomp" ]
	then
		weightComponentsDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
		exit
	fi
	
	if [ "$2" = "Wcomp%" ]
	then
		weightComponentsPercentageDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
		exit
	fi
	
	if [ "$2" = "T" ]
	then
		temperatureDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
		exit
	fi
	
	if [ "$2" = "BR" ]
	then
		channelBRDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" `getValueFromIFIle ${iFile%.*}.m3c "BRANCHING_RATIOS:diagram"`
		exit
	fi
	
	if [ "$2" = "fit_BR" ]
	then
		channelFitBRDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" `getValueFromIFIle ${iFile%.*}.m3c "EXPERIMENTAL_BRANCHING_RATIOS:diagram"` "TRUE"  # << Last is normalize
		exit
	fi
	
	if [ "$2" = "fit_sBR" ]
	then
		speciesFitBRDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" "TRUE"  # << Last is normalize
		exit
	fi
	
	if [ "$2" = "fit_fE" ]
	then
		energyDistDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" `getValueFromIFIle ${iFile%.*}.m3c "EXPERIMENTAL_BRANCHING_RATIOS:diagram"` "TRUE"  # << Last is normalize
		exit
	fi
	
	if [ "$2" = "fit_sfE" ]
	then
		speciesEnergyDistDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" "TRUE"  # << Last is normalize
		exit
	fi
	
	if [ "$2" = "allowedReactions" ]
	then
		if [ -n "$3" ]
		then
			allowedReactionsDiagram ${iFile%.*}.m3c $3 100 100
		else
			allowedReactionsDiagram ${iFile%.*}.m3c "FALSE" 100 100
		fi
		exit
	fi
	
# 	if [ "$2" = "J" ]
# 	then
# 		JDistDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
# 		exit
# 	fi
	
	id=$3
	if [ -n "$id" ]
	then
		if [[ $id =~ [0-9]+ ]]
		then

			if [ -d "${iFile%.*}.data" ]
			then
# 				availableEnergies=( `ls ${iFile%.*}.data/*.inp | sed -r '{s/^.*[/]//g; s/.inp//g}' | sort -n` )
				availableEnergies=( `ls ${iFile%.*}.data/*.inp | sed -r '{s/^.*[/]E_//g; s/.inp//g}' | sort -n` )
			else
				echo "### Error ### Directory ${iFile%.*}.data doesn't exist"
				exit
			fi
# 		else
# 			if [ -f "${iFile%.*}." ]
# 			then
# 			fi
		fi
	fi
	
	target=$2
	case "$target" in
		energy)
			if [ -n "$id" ]
			then
				energyHistoryDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory
# 				historyDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory
			else
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:energyHistoryFile`
				
				if [ -z "$dataFile" ]
				then
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:energyHistoryFile`
				fi
				
				energyHistoryDiagram $dataFile
# 				historyDiagram $dataFile
			fi
			;;
			
		weight)
			if [ -n "$id" ]
			then
				weightHistoryDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.whistory
# 				historyDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.whistory
			else
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:weightHistoryFile`
				
				if [ -z "$dataFile" ]
				then
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:weightHistoryFile`
				fi
				
				weightHistoryDiagram $dataFile
# 				historyDiagram $dataFile
			fi
			;;
			
		species)
			if [ -n "$id" ]
			then
				speciesDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.histogram
			else
# 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAINhistogramFile`
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:histogramFile`
				speciesDiagram $dataFile
			fi
			;;
			
		channels)
			if [ -n "$id" ]
			then
				channelsDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.histogram
			else
# 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAINhistogramFile`
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:histogramFile`
				channelsDiagram $dataFile
			fi
			;;
			
		reactions)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					maxP=$4
					reactionsDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.histogram FALSE $maxP
				fi
			else
				maxP=$4
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:histogramFile`
				reactionsDiagram $dataFile FALSE $maxP
			fi
			;;
			
		reactionsd)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					maxP=$4
					reactionsDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.histogram TRUE $maxP
				else
					maxP=$4
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:histogramFile`
					reactionsDiagram $dataFile TRUE $maxP
				fi
			fi
			;;
			
		J)
			if [ -n "$id" ]
			then
				JHistoryDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.jhistory "J"
			else
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:JHistoryFile`
				JHistoryDiagram $dataFile "J"
			fi
			;;
			
		L)
			if [ -n "$id" ]
			then
				JHistoryDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.lhistory "L"
			else
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:LHistoryFile`
				JHistoryDiagram $dataFile "L"
			fi
			;;
			
		Ecorr)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					typeCorr=$4 #"Er.vs.Et"
					withLabels=$5
					freqLabels=$6
					
					energyCorrelationDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory $typeCorr $withLabels $freqLabels
				else
					typeCorr=$3 #"Er.vs.Et"
					withLabels=$4
					freqLabels=$5
					
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:energyHistoryFile`
					energyCorrelationDiagram $dataFile $typeCorr $withLabels $freqLabels
				fi
			fi
			;;
			
		Ecorr3)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					typeCorr=$4 #"Er.vs.Et.vs.Ev"
					withLabels=$5
					freqLabels=$6
					
					energyTernaryCorrelationDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory $typeCorr $withLabels $freqLabels
				else
					typeCorr=$3 #"Er.vs.Et"
					withLabels=$4
					freqLabels=$5
					
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:energyHistoryFile`
					energyTernaryCorrelationDiagram $dataFile $typeCorr $withLabels $freqLabels
				fi
			fi
			;;
			
		Wcorr)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					typeCorr=$4 #"LnWr.vs.LnWt"
					withLabels=$5
					freqLabels=$6
					
					weightCorrelationDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.whistory $typeCorr $withLabels $freqLabels
				else
					typeCorr=$3 #"LnWr.vs.LnWt"
					withLabels=$4
					freqLabels=$5
					
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:weightHistoryFile`
					weightCorrelationDiagram $dataFile $typeCorr $withLabels $freqLabels
				fi
			fi
			;;
			
		Wcorr3)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					typeCorr=$4 #"LnWr.vs.LnWt.vs.LnWv"
					withLabels=$5
					freqLabels=$6
					
					weightTernaryCorrelationDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.whistory $typeCorr $withLabels $freqLabels
				else
					typeCorr=$3 #"LnWr.vs.LnWt.vs.LnWv"
					withLabels=$4
					freqLabels=$5
					
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:weightHistoryFile`
					weightTernaryCorrelationDiagram $dataFile $typeCorr $withLabels $freqLabels
				fi
			fi
			;;
			
		Whist)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					weightHistogram ${iFile%.*}.data/E_${availableEnergies[$id]}.whistory
				else
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:weightHistoryFile`
					weightHistogram $dataFile
				fi
			fi
			;;
			
# 		all)
# 			if [ -n "$id" ]
# 			then
# 				historyDiagram ${iFile%.*}.data/${availableEnergies[$id]}.history
# 				speciesDiagram ${iFile%.*}.data/${availableEnergies[$id]}.histogram
# 				channelsDiagram ${iFile%.*}.data/${availableEnergies[$id]}.histogram
# # 			else
# 			fi
# 			;;
	esac
	
}

main $*
