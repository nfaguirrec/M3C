#!/bin/bash

FILTER=".*"
GNUPLOT="/usr/local/gnuplot/4.6.1/bin/gnuplot -bg white"
GNUPLOT_TERMINAL=""

####################################
#
####################################
getValueFromIFIle()
{
	local iFile=$1
	local block=`echo $2 | gawk 'BEGIN{FS=":"}{print $1}'`
	local param=`echo $2 | gawk 'BEGIN{FS=":"}{print $2}'`
	
	gawk '
	BEGIN{loc=0}
	($1!~"#" && $0!~"^[[:blank:]]*$"){
		if($0~"END '$block'") loc=0
		if(loc==1) print $0
		if($0~"BEGIN '$block'") loc=1
	}' $iFile | gawk '($1~"'$param'"){ print $3 }'
}

####################################
#
####################################
getTableFromIFile()
{
	local iFile=$1
	local block=`echo $2 | gawk 'BEGIN{FS=":"}{print $1}'`
	
	gawk '
	BEGIN{loc=0}
	($1!~"#" && $0!~"^[[:blank:]]*$"){
		if($0~"END '$block'") loc=0
		if($0!~"=" && loc==1) print $0
		if($0~"BEGIN '$block'") loc=1
	}' $iFile
}

####################################
#
####################################
energyHistoryDiagramSaulo()
{
	local iFile=$1
	
	firstElecEnergy=`head -n7 $iFile | tail -n1 | gawk '{print $4}'`
	nExp=`gawk 'BEGIN{n=0}($0~/^[[:blank:]]*$/){ n++ }END{print n/2-0.5}' $iFile`
	
	cat > .plotE-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

# set xlabel "Step"
# set y2label "Ln(W)"
set format y "%.1f"
set format x "%.0t.10^{%T}"
set xtics add ("0^ " 0)
set key out right center
set xtics font "Helvetica Bold,7" rotate by -45
set ytics font "Helvetica Bold,7"
unset key

set multiplot layout 2,2 columnsfirst scale 1.0,1.1

set ylabel "Kinetic (eV)" font "Helvetica Bold,9"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'$iFile' i $(($i-1)) u :2 t 'kinetic' w l lw 0.6 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :(\$7-($firstElecEnergy)) t "total" w l lt 0 lw 1.5

set ylabel "Rotational (eV)" font "Helvetica Bold,9"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :6 t 'rotational' w l lw 0.6 lt $i, \\"  >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :(\$7-($firstElecEnergy)) t "total" w l lt 0 lw 1.5

set ylabel "Electronic (eV)"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :(\$4-($firstElecEnergy)) t 'electronic' w l lw 0.6 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :(\$7-($firstElecEnergy)) t "total" w l lt 0 lw 1.5

set ylabel "Vibrational (eV)"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :5 t 'vibrational' w l lw 0.6 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :(\$7-($firstElecEnergy)) t "total" w l lt 0 lw 1.5

# set ylabel "Weight (arb)"
# plot [] [:] \\
EOF

# 	for i in `seq 1 $nExp`
# 	do
# 		if [ "$i" != "$nExp" ]
# 		then
# 			echo "'' i $(($i-1)) u :8 t 'Ln(W)' w l lw 0.3 lt $i, \\" >> .plotE-$$
# 		else
# 			echo "'' i $(($i-1)) u :8 t 'Ln(W)' w l lw 0.3 lt $i" >> .plotE-$$
# 		fi
# 	done

	cat >> .plotE-$$ << EOF
	
unset multiplot
EOF
	
	$GNUPLOT -p .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
historyDiagram()
{
	local iFile=$1
	
	nExp=`gawk 'BEGIN{n=0}($0~/^[[:blank:]]*$/){ n++ }END{print n/2}' $iFile`
	
	cat > .plotE-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set format y "%.2f"
set format x "%.0t.10^{%T}"
set xtics add ("0^ " 0)
set key out right center
set xtics font "Helvetica Bold,7" rotate by -45
set ytics font "Helvetica Bold,7"
unset key

set multiplot layout 2,2 columnsfirst scale 1.0,1.1

set ylabel "Translational (eV)" font "Helvetica Bold,9"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'$iFile' i $(($i-1)) u :2 t 'kinetic' w l lw 0.8 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

set ylabel "Potential (eV)" font "Helvetica Bold,9"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :3 t 'intermolecular' w l lw 0.8 lt $i, \\"  >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

set ylabel "Vibrational (eV)"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :4 t 'vibrational' w l lw 0.8 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

set ylabel "Rotational (eV)"
plot [] [:] \\
EOF

	for i in `seq 1 $nExp`
	do
		echo "'' i $(($i-1)) u :5 t 'rotational' w l lw 0.8 lt $i, \\" >> .plotE-$$
	done

	cat >> .plotE-$$ << EOF
"" u :6 t "total" w l lt 0 lw 1.5, \
"" u :(-\$6) t "total" w l lw 0.0

# set ylabel "Weight (arb)"
# plot [] [:] \\
EOF

# 	for i in `seq 1 $nExp`
# 	do
# 		if [ "$i" != "$nExp" ]
# 		then
# 			echo "'' i $(($i-1)) u :8 t 'Ln(W)' w l lw 0.3 lt $i, \\" >> .plotE-$$
# 		else
# 			echo "'' i $(($i-1)) u :8 t 'Ln(W)' w l lw 0.3 lt $i" >> .plotE-$$
# 		fi
# 	done

	cat >> .plotE-$$ << EOF
	
unset multiplot
EOF
	
	$GNUPLOT -p .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
histogram2D()
{
	local iFile=$1
	local cols=$2
	local nBars=$3

	if [ -z "$nBars" ]
	then
		nBars="40,40"
	fi

	# Se eliminan los espacios en blanco y los comentarios
	# por lo tanto, todos los experimentos entran en el
	# mismo análisis
	sed '/^[[:blank:]]*$/d;/#/d' $iFile > .tmpFile$$
	
	# Se capturan los parámetros para el histograma
	col1=`echo $cols | gawk 'BEGIN{FS=","}{print $1}'`
	nbars1=`echo $nBars | gawk 'BEGIN{FS=","}{print $1}'`
	min1=`cat .tmpFile$$ | sort -k $col1 -n | head -n1 | gawk '{print $'$col1'}'`
	max1=`cat .tmpFile$$ | sort -k $col1 -n | tail -n1 | gawk '{print $'$col1'}'`
	h1=`echo "($max1-($min1))/$nbars1" | bc -l`
	
	col2=`echo $cols | gawk 'BEGIN{FS=","}{print $2}'`
	nbars2=`echo $nBars | gawk 'BEGIN{FS=","}{print $2}'`
	min2=`cat .tmpFile$$ | sort -k $col2 -n | head -n1 | gawk '{print $'$col2'}'`
	max2=`cat .tmpFile$$ | sort -k $col2 -n | tail -n1 | gawk '{print $'$col2'}'`
	h2=`echo "($max2-($min2))/$nbars2" | bc -l`
	
	gawk '
	BEGIN{
		xb='`echo $min1`'
		xe='`echo $max1`'
		hx='`echo $h1`'
		
		yb='`echo $min2`'
		ye='`echo $max2`'
		hy='`echo $h2`'
	}

	{
		nx=int(($'`echo $col1`'-xb)/hx)
		ny=int(($'`echo $col2`'-yb)/hy)
		
		if( (nx,ny) in mymap ){
			mymap[nx,ny]+=1
		}else{
			mymap[nx,ny]=1
		}
	}

	END{
		sum=0.0
		
		x=xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			y=yb
			for( ny=0; y<=ye; ny++ ){
				y = yb + ny*hy
				
				if( (nx,ny) in mymap )
					sum += mymap[nx,ny]
			}
		}
		
		x=xb
		for( nx=0; x<=xe; nx++ ){
			x = xb + nx*hx
			
			y=yb
			for( ny=0; y<=ye; ny++ ){
				y = yb + ny*hy
				
				if( (nx,ny) in mymap )
					printf "%20.10f%20.10f%20.10f\n", x, y, mymap[nx,ny]/(hx*hy*sum)
# 					printf "%20.10f%20.10f%20.10f\n", x, y, mymap[nx,ny]
				else
					printf "%20.10f%20.10f%20.10f\n", x, y, 0.0
			}
			
			print ""
		}
	}
	' .tmpFile$$
	
	rm .tmpFile$$
}

####################################
#
####################################
energyCorrelationDiagramSaulo()
{
	local iFile=$1
	local task=$2
	
	firstElecEnergy=`head -n7 $iFile | tail -n1 | gawk '{print $4}'`
	nExp=`gawk 'BEGIN{n=0}($0~/^[[:blank:]]+$/){ n++ }END{print n/2}' $iFile`
	
	cat > .plotE-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1
set size square
set format y "%.1f"
set format x "%.1f"
set format cb "10^{%T}"

set logscale cb

unset key
set palette defined ( 0 "white", 1 "blue", 2 "green", 3 "orange", 4 "yellow", 5 "red" )
set pm3d implicit at s
set xtics rotate by -45 font "Serif,8"
set ytics font "Serif,8"
set cbtics font "Serif,8"
set pointsize 0.3
set view map

EOF

	case "$task" in
		"Ev.vs.Et" )
			echo "set xlabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "5,2" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Et.vs.Ev" )
			echo "set xlabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "2,5" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Ev.vs.Er" )
			echo "set xlabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "5,6" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Er.vs.Ev" )
			echo "set xlabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "6,5" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Ev.vs.Ee" )
			echo "set xlabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Electronic energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:(\$2-($firstElecEnergy)):3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "5,4" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Ee.vs.Ev" )
			echo "set xlabel 'Electronic energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u (\$1-($firstElecEnergy)):2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "4,5" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Et.vs.Er" )
			echo "set xlabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "2,6" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Er.vs.Et" )
			echo "set xlabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "6,2" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Et.vs.Ee" )
			echo "set xlabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Electronic energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:(\$2-($firstElecEnergy)):3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "2,4" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Ee.vs.Et" )
			echo "set xlabel 'Electronic energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u (\$1-($firstElecEnergy)):2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "4,2" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Er.vs.Ee" )
			echo "set xlabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Electronic energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:(\$2-($firstElecEnergy)):3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "6,4" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Ee.vs.Er" )
			echo "set xlabel 'Electronic energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u (\$1-($firstElecEnergy)):2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "4,6" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		*)
			echo "### ERROR ### Energy correlation diagram. Unknown option $task"
			echo "              Available options:"
			echo "                  Ev.vs.Et  | Et.vs.Ev"
			echo "                  Ev.vs.Er  | Er.vs.Ev"
			echo "                  Ev.vs.Ee  | Ee.vs.Ev"
			echo "                  Et.vs.Er  | Er.vs.Et"
			echo "                  Et.vs.Ee  | Ee.vs.Et"
			echo "                  Er.vs.Ee  | Ee.vs.Er"
			exit
	esac

	$GNUPLOT -p .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
energyCorrelationDiagram()
{
	local iFile=$1
	local task=$2
	
	firstElecEnergy=`head -n7 $iFile | tail -n1 | gawk '{print $4}'`
	nExp=`gawk 'BEGIN{n=0}($0~/^[[:blank:]]+$/){ n++ }END{print n/2}' $iFile`
	
	cat > .plotE-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1
set size square
set format y "%.1f"
set format x "%.1f"
set format cb "10^{%T}"

set logscale cb

unset key
set palette defined ( 0 "white", 1 "blue", 2 "green", 3 "orange", 4 "yellow", 5 "red" )
set pm3d implicit at s
set xtics rotate by -45 font "Serif,8"
set ytics font "Serif,8"
set cbtics font "Serif,8"
set pointsize 0.3
set view map

EOF
	
	case "$task" in
		"Ev.vs.Et" )
			echo "set xlabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "4,2" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Et.vs.Ev" )
			echo "set xlabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "2,4" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Ev.vs.Er" )
			echo "set xlabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			cp $iFile hola
			histogram2D $iFile "4,5" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Er.vs.Ev" )
			echo "set xlabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Vibrational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "5,4" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Et.vs.Er" )
			echo "set xlabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "2,5" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Er.vs.Et" )
			echo "set xlabel 'Rotational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "5,2" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"Et.vs.U" )
			echo "set xlabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Intermolecular potential (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "2,3" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		"U.vs.Et" )
			echo "set xlabel 'Intermolecular potential (eV)' font 'Serif,9'" >> .plotE-$$
			echo "set ylabel 'Translational energy (eV)' font 'Serif,9'" >> .plotE-$$
			echo "splot '-' u 1:2:3 w p ps 0" >> .plotE-$$
			histogram2D $iFile "3,2" >> .plotE-$$
			echo "e" >> .plotE-$$
			;;
		*)
			echo "### ERROR ### Energy correlation diagram. Unknown option $task"
			echo "              Available options:"
			echo "                  Ev.vs.Et  | Et.vs.Ev"
			echo "                  Ev.vs.Er  | Er.vs.Ev"
			echo "                  Et.vs.Er  | Er.vs.Et"
			echo "                  Et.vs.U   | U.vs.Et"
			exit
	esac

	$GNUPLOT -p .plotE-$$

	rm .plotE-$$
}

####################################
#
####################################
JHistoryDiagram()
{
	local iFile=$1

	python -c '
import sys
import re
from operator import itemgetter

inputFile = file( sys.argv[1], "r" )
lines = inputFile.read().splitlines()
inputFile.close()

species = {}
maxJ = {}

for line in lines:
		if( not re.match( "(^#.*|^[\s]*$)", line ) ):
			items = line.split()
			for item in items:
				tokens = item.split("#")
				
				specie = tokens[0]
# 				specie = tokens[0].split(":")[1].split("(")[0]
				J = int(tokens[1])
				
				if( not specie in species ):
					species[specie] = []
					
				species[specie].append(J)
				
				if( not specie in maxJ ):
					maxJ[specie] = 0
					
				if( J > maxJ[specie] ):
					maxJ[specie] = J

nGroups = 30
histogram = {}

# stepSize = 40

for specie in species.keys():
	if( maxJ[specie] > 0 ):
		stepSize = maxJ[specie]/nGroups
		
		for J in species[specie]:
			n = J/stepSize
			
			if( not specie in histogram ):
				histogram[specie] = {}
				
			if( not n in histogram[specie] ):
				histogram[specie][n] = 0
				
			histogram[specie][n] += 1
			
speciesSorted = sorted( maxJ.items(), key=itemgetter(1), reverse=False )
			
# for specie in species.keys():
for item in speciesSorted:
	specie = item[0]
	
	if( maxJ[specie] > 0 ):
		print "#%20s"%specie, maxJ[specie]
		
		sum = 0.0
		for n in histogram[specie]:
			sum += histogram[specie][n]
			
		stepSize = maxJ[specie]/nGroups
		
		sum2 = 0.0
		for n in range(0,(maxJ[specie]+1)/stepSize):
# 		for n in range(0,(max(maxJ.values())+1)/stepSize):
			J = n*stepSize
			
			if( n in histogram[specie] ):
# 				Prob = float( histogram[specie][n] )/(sum*stepSize)
				Prob = float( histogram[specie][n] )/max(histogram[specie].values())
				sum2 += Prob
				print "%20d"%J, "%20.5f"%Prob
			else:
				Prob = 0.0
				print "%20d"%J, "%20.5f"%Prob
				
		print "#>>>", sum2*stepSize, maxJ[specie]
				
				
		print "\n"
	' $iFile > .rawData-$$
	
	cp .rawData-$$ salida
	
	cat > .plotJ-$$ << EOF
set size square
set origin 0.0,0.02
unset key
set style fill transparent solid border lc rgb "black"

set xlabel "J (a.u.)" font "Serif,13"
set ylabel "Frequency" font "Serif,13"

set tics front
set xtics rotate by -45
set format y "%.1f"

EOF

	nItems=`grep "# " .rawData-$$ | wc -l`
	labels=( `grep "# " .rawData-$$ | gawk '{print $2}'` )
	maxJ=( `grep "# " .rawData-$$ | gawk '{print $3}'` )
	
	for (( i=0; i<$nItems; i++ ))
	do
			echo "set title '${labels[$i]}' font 'Serif,14'" >> .plotJ-$$
# 			echo "plot [-0.05*${maxJ[$i]}:1.05*${maxJ[$i]}] [-0.05:1.05] \\" >> .plotJ-$$
			echo "plot [-8:160.0+8] [-0.05:1.05] \\" >> .plotJ-$$
			echo "'.rawData-$$' i $i u 1:2 w boxes lw 0.8, \\" >> .plotJ-$$
			echo "'.rawData-$$' i $i u 1:2:(1e-3) smooth acsplines w l lw 2.5" >> .plotJ-$$
			echo "pause -1" >> .plotJ-$$
	done

	$GNUPLOT -p .plotJ-$$
	
	rm .rawData-$$ .plotJ-$$
}

####################################
#
####################################
speciesDiagram()
{
	local iFile=$1
	local maxPForDetails=$2
	
	if [ -z "$maxPForDetails" ]
	then
		maxPForDetails=0.01
	fi
	
	nExp=`gawk 'BEGIN{n=0}{if(NF>n) n++}END{print n-4}' $iFile`
# 	nExp=`gawk '($1~/#/ && $2~/aver/){print NF-4; exit}' $iFile`
	
	cp $iFile .dataC-$$
	
	############################################
	# Plot species
	############################################
	sed -i -r '{s/(_)([[:digit:]]+)/_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	
	cat > .plotC-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
# $GNUPLOT 4.6
#set xtics rotate by -70 left font "Helvetica Bold,10" 
# $GNUPLOT 4.4
set xtics rotate by -70 font "Helvetica Bold,10" 
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
set title "Species distribution"

set size 1.0,0.9
set origin 0.0,0.1

plot [] [0:] \
'.dataC-$$' i 2 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

EOF
	$GNUPLOT -p .plotC-$$
	
	############################################
	# Plot species with details
	############################################
	gawk '{if($'$(($nExp+2))'>'$maxPForDetails' || $0~/^[[:blank:]]*$/) print $0}' $iFile > .dataC-$$ # Se filtran los datos para P>maxPForDetails
	sed -i -r '{s/(_)([[:digit:]]+)/@_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	sed -i -r '{s/[[:digit:]]+://g}' .dataC-$$ # Eliminar el identificador de los clusters
	sed -i -r '{s/(\()([[:digit:],]+)(\))/^{\2}/g}' .dataC-$$ # Poner carga, espin y geometria como superindice
	sed -i -r '{s/,//g}' .dataC-$$ # Eliminar las comas entre carga, espin y geometria
	
	cat > .plotC-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
# $GNUPLOT 4.6
#set xtics rotate by -70 left font "Helvetica Bold,10" 
# $GNUPLOT 4.4
set xtics rotate by -70 font "Helvetica Bold,10" 
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
set title "Species distribution (P>`echo "scale=1;$maxPForDetails*100.0" | bc -l`)"

set size 1.0,0.9
set origin 0.0,0.1

plot [] [0:] \
'.dataC-$$' i 3 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

EOF
	$GNUPLOT -p .plotC-$$
	
	rm .dataC-$$ .plotC-$$
}

####################################
#
####################################
channelsDiagram()
{
	local iFile=$1
	local maxPForDetails=$2
	
	if [ -z "$maxPForDetails" ]
	then
		maxPForDetails=0.01
	fi
	
	nExp=`gawk 'BEGIN{n=0}{if(NF>n) n++}END{print n-4}' $iFile`
# 	nExp=`gawk '($1~/#/ && $2~/aver/){print NF-4; exit}' $iFile`
	
	cp $iFile .dataC-$$
	
	############################################
	# Plot channels
	############################################
	sed -i -r '{s/(_)([[:digit:]]+)/_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	
	cat > .plotC-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
# $GNUPLOT 4.6
#set xtics rotate by -70 left font "Helvetica Bold,10" 
# $GNUPLOT 4.4
set xtics rotate by -70 font "Helvetica Bold,10"
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
# set title "Channels distribution"

set size 1.0,0.9
set origin 0.0,0.1

plot [] [0:] \
'.dataC-$$' i 0 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

EOF
	$GNUPLOT -p .plotC-$$
	
	############################################
	# Plot channels with details
	############################################
	gawk '{if($'$(($nExp+2))'>'$maxPForDetails' || $0~/^[[:blank:]]*$/) print $0}' $iFile > .dataC-$$ # Se filtran los datos para P>maxPForDetails
	sed -i -r '{s/(_)([[:digit:]]+)/@_{\2}/g}' .dataC-$$  # Escribir bien los superindices
	sed -i -r '{s/[[:digit:]]+://g}' .dataC-$$ # Eliminar el identificador de los clusters
	sed -i -r '{s/(\()([[:digit:],]+)(\))/^{\2}/g}' .dataC-$$ # Poner carga, espin y geometria como superindice
	sed -i -r '{s/,//g}' .dataC-$$ # Eliminar las comas entre carga, espin y geometria
	
	cat > .plotC-$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

unset key
set boxwidth 1.5 absolute
set style fill solid border lt 0
set style histogram errorbars lw 1
set style data histograms
set grid y
set xtics rotate by -70 left font "Helvetica Bold,10" 
set ytics font "Helvetica Bold,9"
set format y "%3.1f"
set ylabel "Probability (%)"
set title "Channels distribution (P>`echo "scale=1;$maxPForDetails*100.0" | bc -l`)"

set size 1.0,0.9
set origin 0.0,0.1

plot [] [0:] \
'.dataC-$$' i 1 u (\$$(($nExp+2))*100.0):(\$$(($nExp+3))*100.0):xticlabels(1)

EOF
	$GNUPLOT -p .plotC-$$
	
	rm .dataC-$$ .plotC-$$
}

####################################
#
####################################
showSparseMatrix()
{
	local iFile=$1
	local keys=$2
	
	grep -E "$FILTER" $iFile | \
		gawk '
		BEGIN{
			FS="#"
		}
		
		{
			iVec[$1]=1
			jVec[$2]=1
			values[$1","$2]=$3
		}
		
		END{
			for(i in iVec){
				printf "%15.5f", i
				
				for(j in jVec){
					if( i","j in values ){
						split( values[i","j], arr, ":" )
						printf "   %15.5f%15.5f   ", arr[1], arr[2]
					}else{
						printf "   %15.5f%15.5f   ", 0.0, 0.0
					}
				}
				printf "\n"
			}
			
			for(j in jVec){
				print j >> ".keys'$$'"
			}
		}
		' | sort -k 1 -n
	
	if [ -n "$keys" ]
	then
		mv .keys$$ $keys
	else
		rm .keys$$
	fi
}

####################################
#
####################################
energyDiagram()
{
	local energyDir=$1
	local type=$2
	
	local filter="*.eblkC"
	case $type in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	xMin=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | head -n1`
	xMax=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | tail -n1`
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat > matrix.data
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
#	cp keys.dat tmp-$$
#	gawk '
#	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
#	{
#		print reduceM3CLabel($1)
#	}' tmp-$$ > keys.dat
#	rm tmp-$$

	if [ "$type" = "Cd.vs.E" -o "$type" = "Sd.vs.E" ]
	then
		sed -i -r '{s/(_)([[:digit:]]+)/@_{\2}/g}' keys.dat  # Escribir bien los superindices
		sed -i -r '{s/(\()([[:digit:],]+)(\))/^{\2}/g}' keys.dat # Poner carga, espin y geometria como superindice
		sed -i -r '{s/,//g}' keys.dat # Eliminar las comas entre carga, espin y geometria
	fi
	
	keys=( `cat keys.dat` )
	
	nChannels=`head -n1 matrix.data | wc -w`
	nChannels=$(( ($nChannels-1)/2 )) # Se le resta la columna de la energía que es la primera. Dividido en 2 por que hay aver y desv
	
	rm keys.dat

	cat > .plotMtj-$iFile$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

# set xlabel "Step"
# set ylabel "Energy (eV)"
# set y2label "Ln(W)"
set format x "%.1f"
set format y "%.0f"
set xlabel "Excitation energy (eV)"
set ylabel "Probability (%)"
# set key out right center
set xtics font "Helvetica Bold,9"
set ytics font "Helvetica Bold,9"
# set y2tics nomirror
set key out left bottom font "Helvetica Bold,8" Right spacing 1.0
set mxtics 5
set mytics 5
set grid y
set size square

# $GNUPLOT 4.6
#set linestyle  2 lc rgb "forest-green"
#set linestyle  3 lc rgb "#4253BB"
#set linestyle  5 lc rgb "#8196FF"
#set linestyle  6 lc rgb "#FBDF06"

# $GNUPLOT 4.4
set style line  2 lc rgb "forest-green"
set style line  3 lc rgb "#4253BB"
set style line  5 lc rgb "#8196FF"
set style line  6 lc rgb "#FBDF06"


plot [$xMin-($xMax-$xMin)*0.03:$xMax+($xMax-$xMin)*0.03] [-3:103] \\
EOF
	
	for (( i=1; i<=$nChannels; i++ ))
	do
		yCol="(\$$(( 2*$i ))*100)"
		errCol="(\$$(( 2*$i+1 ))*100)"
		smoothCol="(abs(\$$(( 2*$i+1 ))))"
		
		if (( $i != $nChannels ))
		then
			echo "'matrix.data' u 1:$yCol:$smoothCol smooth unique notitle w l ls $i lw 2.0, \\" >> .plotMtj-$iFile$$
			echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt 7 ps 0.7 lw 0.5, \\" >> .plotMtj-$iFile$$
			echo "'matrix.data' u 1:$yCol notitle w p pt 7 ps 0.1 lc rgb 'white', \\" >> .plotMtj-$iFile$$
		else
			echo "'matrix.data' u 1:$yCol:$smoothCol smooth unique notitle w l ls $i lw 2.0, \\" >> .plotMtj-$iFile$$
			echo "'matrix.data' u 1:$yCol:$errCol t '${keys[$(($i-1))]}' w yerrorbars ls $i pt 7 ps 0.7 lw 0.5, \\" >> .plotMtj-$iFile$$
			echo "'matrix.data' u 1:$yCol notitle w p pt 7 ps 0.1 lc rgb 'white'" >> .plotMtj-$iFile$$
		fi
	done
	
	$GNUPLOT -p .plotMtj-$iFile$$
	
	rm .plotMtj-$iFile$$ matrix.data
	
	popd > /dev/null 2> /dev/null
}

####################################
#
####################################
channelBRDiagram()
{
	local iFile=$1
	local energyDir=$2
	local diagram=$3
	
	local BRFile=`getValueFromIFIle ${iFile%.*}.m3c "BRANCHING_RATIOS:BRfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	local filter="*.eblkC"
	case $diagram in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nChannels=`cat keys.dat | wc -w`
	nChannels=$(( $nChannels-1 ))
	
	M3CBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
#	cp $BRFile tmp-$$
#	gawk '
#	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
#	($1!~/^#/){
#		print reduceM3CLabel($1), $2, $3, $4
#	}' tmp-$$ > $BRFile
#	rm tmp-$$
	
	yMax=`gawk '($0!~/#/){printf "%s\n%s\n",$2,$3}' $BRFile | sort -k 1 -n | tail -n1`
	
	cat > .plotBR-$iFile$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size square
# set size 0.9,1.0
set ylabel "Branching ratios (%)"
set format y "%.0f"
# set key out left bottom
#set key left
set xtics font "Helvetica Bold,9" rotate by -45
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10"

set mytics 5
# set grid y

plot [-$nChannels*0.1:$nChannels*1.1] [-$yMax*0.1:$yMax*1.1] \
"$BRFile" u :3:4 t "experimental" w yerrorbars pt 7 lt 3, \
"" u :3:4 notitle w l lt 0 lw 2 lc rgb "blue", \
"" u :2:xtic(1) t "theoretical" w lp ps 1.0 pt 4 lt 0 lw 2 lc rgb "red"
EOF
	
	$GNUPLOT -p .plotBR-$iFile$$ 2> /dev/null
	
	rm .plotBR-$iFile$$
}

####################################
#
####################################
channelFitBRDiagram()
{
	local iFile=$1
	local energyDir=$2
	local diagram=$3
	
	local BRFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:BRfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	local filter="*.eblkC"
	case $diagram in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nChannels=`cat keys.dat | wc -w`
	nChannels=$(( $nChannels-1 ))
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
#	cp $BRFile tmp-$$
#	gawk '
#	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
#	($1!~/^#/){
#		print reduceM3CLabel($1), $2, $3, $4
#	}' tmp-$$ > $BRFile
#	rm tmp-$$
	
	yMax=`gawk '($0!~/#/){printf "%s\n%s\n",$2,$3}' $BRFile | sort -k 1 -n | tail -n1`
	
	cat > .plotBR-$iFile$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size square
# set size 0.9,1.0
set xlabel "Channel"
set ylabel "Branching ratios (%)"
set format y "%.0f"
# set key out left bottom
#set key left
set xtics font "Helvetica Bold,9" rotate by -45
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10"

set mytics 5
# set grid y

plot [-$nChannels*0.1:$nChannels*1.1] [-$yMax*0.1:$yMax*1.1] \
"$BRFile" u :3:4:xtic(1) t "experimental" w yerrorbars pt 7 lt 3, \
"" u :3:4 notitle w l lt 0 lw 2 lc rgb "blue", \
"" u :2 t "theoretical" w lp ps 1.0 pt 4 lt 0 lw 2 lc rgb "red"
EOF
	
	$GNUPLOT -p .plotBR-$iFile$$
	
	rm .plotBR-$iFile$$
}

####################################
#
####################################
speciesFitBRDiagram()
{
	local iFile=$1
	local energyDir=$2
	
	local BRFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:BRfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls *.eblkS`
	do
		cat $f >> sparseMatrix.dat
	done
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	FILTER="p"
	showSparseMatrix sparseMatrix.dat keys.dat > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters
	
	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nSpecies=`cat keys.dat | wc -w`
	nSpecies=$(( $nSpecies-1 ))
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
# 	M3CBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
#	cp $BRFile tmp-$$
#	gawk '
#	@include "'$M3C_HOME'/utils/M3CUtils.gawk"
#	($1!~/^#/){
#		print reduceM3CLabel($1), $2, $3, $4
#	}' tmp-$$ > $BRFile
#	rm tmp-$$
	
	yMax=`gawk '($0!~/#/){printf "%s\n%s\n",$2,$3}' $BRFile | sort -k 1 -n | tail -n1`
	
	cat > .plotBR-$iFile$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set size square
# set size 0.9,1.0
set xlabel "Channel"
set ylabel "Branching ratios (%)"
set format y "%.0f"
# set key out left bottom
set key left
set xtics font "Helvetica Bold,9" rotate by -45
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10"

set mytics 5
# set grid y

plot [-$nSpecies*0.1:$nSpecies*1.1] [-$yMax*0.1:$yMax*1.1] \
"$BRFile" u :3:4 t "experimental" w yerrorbars pt 7 lt 3, \
"" u :3:4 notitle w l lt 0 lw 2 lc rgb "blue", \
"" u :2:xtic(1) t "theoretical" w lp ps 1.0 pt 4 lt 0 lw 2 lc rgb "red"
EOF
	
#	$GNUPLOT -p .plotBR-$iFile$$
	rm .plotBR-$iFile$$
	
	cp $BRFile .$BRFile-tmp$$
	
	getTableFromIFile $iFile EXPERIMENTAL_BRANCHING_RATIOS | while read line
	do
		key=`echo $line | gawk '{print $1}'`
		mq=`echo $line | gawk '{print $4}'`

#  ubuntu 14	
#		sed -i 's/^[\s]*'$key' /'$mq'  '$key' /g' .$BRFile-tmp$$
		sed -i 's/ '$key' /'$mq'  '$key' /g' .$BRFile-tmp$$
	done
	
	cat > .plotmqBR-$iFile$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

# set size square
set size 1.0,0.8
set xlabel "m/z"
set ylabel "Normalized Intensity"
set format y "%.0f"
set xtics font "Helvetica Bold,9"
set ytics font "Helvetica Bold,9"
set key font "Helvetica Bold,10"

# set mytics 5
# set grid y

max(a,b) = (a>b)?a:b

# set key left
# plot [] [-2:] \
# ".$BRFile-tmp$$" u 1:4 t "experimental" w impulses lt 3 lw 4, \
# "" u 1:3 t "theoretical" w impulses lt 1 lw 4, \
# "" u (\$1):(max(\$3,\$4)+7):2 notitle w labels font "Serif,7" rotate by 90

maxI=`sort -k3 -n .$BRFile-tmp$$ | tail -n1 | gawk '{print $3}'`

unset key
plot [] [-5:125] \
".$BRFile-tmp$$" u 1:(100*\$3/maxI) t "theoretical" w impulses lt 1 lw 5, \
"" u (\$1):(100*\$3/maxI+5.0):2 notitle w labels left font "Serif,8" rotate by 90


EOF
	$GNUPLOT -p .plotmqBR-$iFile$$
	rm .plotmqBR-$iFile$$
	rm .$BRFile-tmp$$
}

####################################
#
####################################
energyDistDiagram()
{
	local iFile=$1
	local energyDir=$2
	local diagram=$3
	
	local eDistFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:eDistfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	local filter="*.eblkC"
	case $diagram in
		N.vs.E )
			filter="*.eblkN"
			;;
		C.vs.E )
			filter="*.eblkC"
			;;
		Cd.vs.E )
			filter="*.eblkCd"
			;;
		S.vs.E )
			filter="*.eblkS"
			;;
		Sd.vs.E )
			filter="*.eblkSd"
			;;
		*)
			showUsage
			exit
	esac
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls $filter`
	do
		cat $f >> sparseMatrix.dat
	done
	
	xMax=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | tail -n1`
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	showSparseMatrix sparseMatrix.dat keys.dat > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters

	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nChannels=`cat keys.dat | wc -w`
	nChannels=$(( $nChannels-1 ))
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
	yMax=`gawk '{printf "%15.6f%15.6f\n",$1,$2}' $eDistFile | sort -k 2 -n | tail -n1 | gawk '{print $2}'`
	
	cat > .plotED-$iFile$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set xlabel "Excitation energy (eV)"
set ylabel "Probability (%)"
set format y "%.0f"
unset key
set xtics font "Helvetica Bold,9"
set ytics font "Helvetica Bold,9"

set mxtics 5
set mytics 5
# set grid
set size square

plot [-$xMax*0.04:$xMax*1.04] [-$yMax*0.04:$yMax*1.04] \
"$eDistFile" u 1:2 w l ls 0 lw 4
EOF
	
	$GNUPLOT -p .plotED-$iFile$$
	
	rm .plotED-$iFile$$
}

####################################
#
####################################
speciesEnergyDistDiagram()
{
	local iFile=$1
	local energyDir=$2
	
	local eDistFile=`getValueFromIFIle ${iFile%.*}.m3c "FIT_BRANCHING_RATIOS:eDistfile"`
	
	pushd . > /dev/null 2> /dev/null
	cd $energyDir
	
	cat /dev/null > sparseMatrix.dat
	for f in `ls *.eblkS`
	do
		cat $f >> sparseMatrix.dat
	done
	
	xMax=`gawk 'BEGIN{FS="#"}{print $1}' sparseMatrix.dat | sort -n | tail -n1`
	
	# Dentro de showSparseMatrix los datos son filtrados de acuerdo a FILTER
	FILTER="p"
	showSparseMatrix sparseMatrix.dat keys.dat > matrix.dat
	rm sparseMatrix.dat
	
	sed -i -r '{s/[[:digit:]]+://g}' keys.dat # Eliminar el identificador de los clusters

	popd > /dev/null 2> /dev/null
	
	mv $energyDir/matrix.dat .
	mv $energyDir/keys.dat .
	
	nSpecies=`cat keys.dat | wc -w`
	nSpecies=$(( $nSpecies-1 ))
	
	M3CfitBR -i $iFile -d matrix.dat -k keys.dat
	rm matrix.dat keys.dat
	
	yMax=`gawk '{printf "%15.6f%15.6f\n",$1,$2}' $eDistFile | sort -k 2 -n | tail -n1 | gawk '{print $2}'`
	
	cat > .plotED-$iFile$$ << EOF
$GNUPLOT_TERMINAL
set termopt enhanced
set encoding iso_8859_1

set xlabel "Excitation energy (eV)"
set ylabel "Probability (%)"
set format y "%.0f"
unset key
set xtics font "Helvetica Bold,9"
set ytics font "Helvetica Bold,9"

set mxtics 5
set mytics 5
# set grid
set size square

plot [-$xMax*0.04:$xMax*1.04] [-$yMax*0.04:$yMax*1.04] \
"$eDistFile" u 1:2 w l ls 0 lw 4
EOF
	
	$GNUPLOT -p .plotED-$iFile$$
	
	rm .plotED-$iFile$$
}

####################################
#
####################################
showAvailableEnergies()
{
	local iFile=$1
	
	availableEnergies=( `ls ${iFile%.*}.data/*.inp | sed -r '{s/^.*[/]E_//g; s/.inp//g}' | sort -n` )
	
	printf "%25s\n" "------------------------"
	printf "%25s\n" "available energies"
	printf "%25s\n" "------------------------"
	printf "%10s%15s%15s%15s%15s\n" "id" "energy" "jhistory" "whistory" "histogram"
	printf "\n"
	for (( i=0; i<${#availableEnergies[@]}; i++ ))
	do
		jhist="NONE"
		whist="NONE"
		chann="NONE"
		
		if [ -f "${iFile%.*}.data/E_${availableEnergies[$i]}.jhistory" ]
		then
			jhist="OK"
		fi
		
		if [ -f "${iFile%.*}.data/E_${availableEnergies[$i]}.whistory" ]
		then
			whist="OK"
		fi
		
		if [ -f "${iFile%.*}.data/E_${availableEnergies[$i]}.histogram" ]
		then
			chann="OK"
		fi
		
		printf "%10d%15.5f%15s%15s%15s\n" "$i" "${availableEnergies[$i]}" "$jhist" "$whist" "$chann"
	done
}

####################################
#
####################################
textbb(){
	echo -n `tput bold`$1`tput sgr0`
}

####################################
#
####################################
showUsage()
{
cat << EOF
`textbb NAME`
        `textbb M3C.analysis` - Tool for visualize the results generated by M3C program

`textbb SYNOPSYS`
        `textbb M3C.analysis` [ POSIX or GNU style options ]
        
`textbb DESCRIPTION`

`textbb OPTIONS`
        `textbb M3C.analysis` accepts the following options.
        
        `textbb -i` inputFile.m3c
        `textbb --ifile` inputFile.m3c
                bla bla bla bla
                
        `textbb -c` [value]
        `textbb --channels` [value]
                bla bla bla bla. [C|Cd|S|Sd]. See --filter option

        `textbb -s` [value]
        `textbb --species` [value]
                bla bla bla bla. [C|Cd|S|Sd]. See --filter option
                
        `textbb -h` [value]
        `textbb --history` [value]
                bla bla bla bla. [K|V|Ee|Ev|Er]
        
        `textbb -b`
        `textbb --bratio`
                bla bla bla bla
                
        `textbb -h` [value]
        `textbb --histogram` [value]
                bla bla bla bla. [K,V,Ee,Ev,Er,R,J]
                
        `textbb -f` [value]
        `textbb --filter` [value]
                bla bla bla bla
        
        `textbb "energyID { history|species|channels|all }"`
                bla bla bla bla
                
`textbb EXAMPLES`
        
        Show the species diagram as function of the excitation energy with the results obtained
        from the input file example.m3c
                $ M3C.analysis example.m3c S.vs.E
                
        Filtering the results
                $ M3C.analysis example.m3c S.vs.E "C_[23]"
                
                $ M3C.analysis example.m3c Cd.vs.E "[1-9]:C_2\([[:digit:],]+\)[+][1-9]:C_3\([[:digit:],]+\)"
                
                $ M3C.analysis example.m3c Cd.vs.E "[[:digit:]]:C_2\([[:digit:],]+\)[+][[:digit:]]:C_3\([[:digit:],]+\)"
                
        Plotting histrograms for species or channels and history energy for each value of energy
                $ M3C.analysis example.m3c
                ------------------------
                        available energies
                ------------------------
                                id         energy        history      histogram

                                0        0.00000             OK             OK
                                1        1.00000             OK             OK
                                2        2.00000             OK             OK
                                ...
                               29       29.00000             OK             OK
                               30       30.00000             OK             OK
        
                $ M3C.analysis example.m3c 29 channels

`textbb AUTHORS`

`textbb ACKNOWLEDGEMENTS`

`textbb COPYING PERMISSIONS`
       Copyright © 1989, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001, 2002, 2003, 2004, 2005, 2007, 2009, 2010, 2011 Free Software Foundation, Inc.

       Permission is granted to make and distribute verbatim copies of this manual page provided the copyright notice and this permission notice are preserved on all copies.

       Permission is granted to copy and distribute modified versions of this manual page under the conditions for verbatim copying, provided that the entire resulting derived  work  is
       distributed under the terms of a permission notice identical to this one.

       Permission is granted to copy and distribute translations of this manual page into another language, under the above conditions for modified versions, except that this permission
       notice may be stated in a translation approved by the Foundation.
EOF
}

####################################
#
####################################
main()
{
	# c:: esto es para argumentos cuyo valor es opcional -c2.3 y argumento largo es c-long:: para --c-long=2.3
	TEMP=`getopt \
		-o i:c:s:h:bh:f:n: \
		--long ifile:,channels:,species:,history:,bratio:,histogram:,filter:,energyID: \
		-n 'M3C.analysis' -- "$@"`

# 	if [ $? != 0 ]
# 	then
# 		echo "Terminating..." >&2
# 		exit 1
# 	fi
# 	
# 	eval set -- "$TEMP"
# 	while true
# 	do
# 		case "$1" in
# 			-a|--a-long)
# 				echo "Option a"
# 				shift
# 				;;
# 			-b|--b-long)
# 				# Este tiene un argumento por eso el shift 2
# 				echo "Option b, argument \`$2'"
# 				shift 2
# 				;;
# 			-c|--c-long) 
# 				# c has an optional argument. As we are in quoted mode,
# 				# an empty parameter will be generated if its optional
# 				# argument is not found.
# 				case "$2" in
# 					"")
# 						echo "Option c, no argument"
# 						shift 2
# 						;;
# 					*)
# 						echo "Option c, argument \`$2'"
# 						shift 2
# 						;;
# 				esac
# 				;;
# 			--)
# 				shift
# 				break
# 				;;
# 			*)
# 				echo "Internal error!"
# 				exit 1
# 				;;
# 		esac
# 	done
# 	exit

	local iFile=$1
	local id=""
	local target=""
	
	if [ -z "$1" ]
	then
		showUsage
		exit
	fi
	
	if [ -z "$2" ]
	then
		showAvailableEnergies $iFile
		exit
	fi
	
	if [[ "$2" =~ ".vs." ]]
	then
		if [ -n "$3" ]
		then
			FILTER="$3"
		fi
		
		energyDiagram "${iFile%.*}.data/" "$2"
		exit
	fi
	
	if [ "$2" = "BR" ]
	then
		channelBRDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" `getValueFromIFIle ${iFile%.*}.m3c "BRANCHING_RATIOS:diagram"`
		exit
	fi
	
	if [ "$2" = "fit_BR" ]
	then
		channelFitBRDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" `getValueFromIFIle ${iFile%.*}.m3c "EXPERIMENTAL_BRANCHING_RATIOS:diagram"`
		exit
	fi
	
	if [ "$2" = "fit_sBR" ]
	then
		speciesFitBRDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
		exit
	fi
	
	if [ "$2" = "fit_fE" ]
	then
		energyDistDiagram ${iFile%.*}.m3c "${iFile%.*}.data/" `getValueFromIFIle ${iFile%.*}.m3c "EXPERIMENTAL_BRANCHING_RATIOS:diagram"`
		exit
	fi
	
	if [ "$2" = "fit_sfE" ]
	then
		speciesEnergyDistDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
		exit
	fi
	
# 	if [ "$2" = "J" ]
# 	then
# 		JDistDiagram ${iFile%.*}.m3c "${iFile%.*}.data/"
# 		exit
# 	fi

	id=$3
	if [ -n "$id" ]
	then
		if [[ $id =~ [0-9]+ ]]
		then

			if [ -d "${iFile%.*}.data" ]
			then
# 				availableEnergies=( `ls ${iFile%.*}.data/*.inp | sed -r '{s/^.*[/]//g; s/.inp//g}' | sort -n` )
				availableEnergies=( `ls ${iFile%.*}.data/*.inp | sed -r '{s/^.*[/]E_//g; s/.inp//g}' | sort -n` )
			else
				echo "### Error ### Directory ${iFile%.*}.data doesn't exist"
				exit
			fi
# 		else
# 			if [ -f "${iFile%.*}." ]
# 			then
# 			fi
		fi
	fi
	
	target=$2
	typeEcorr=$4
	case "$target" in
		energy)
			if [ -n "$id" ]
			then
				energyHistoryDiagramSaulo ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory
# 				historyDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory
			else
# 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c SMJJ:energyHistoryFile`
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:energyHistoryFile`
				
				if [ -z "$dataFile" ]
				then
# 					dataFile=`getValueFromIFIle ${iFile%.*}.m3c SMJL:energyHistoryFile`
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:energyHistoryFile`
				fi
				
				energyHistoryDiagramSaulo $dataFile
# 				historyDiagram $dataFile
			fi
			;;
		species)
			if [ -n "$id" ]
			then
				speciesDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.histogram
			else
# 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c SMJJ:histogramFile`
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:histogramFile`
				speciesDiagram $dataFile
			fi
			;;
		channels)
			if [ -n "$id" ]
			then
				channelsDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.histogram
			else
# 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c SMJJ:histogramFile`
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:histogramFile`
				channelsDiagram $dataFile
			fi
			;;
		J)
			if [ -n "$id" ]
			then
				JHistoryDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.jhistory
			else
				dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:JHistoryFile`
				JHistoryDiagram $dataFile
			fi
			;;
		ecorr)
			if [ -n "$id" ]
			then
				if [[ $id =~ [0-9]+ ]]
				then
					energyCorrelationDiagramSaulo ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory $typeEcorr #"Et.vs.Ev"
				else
					typeEcorr=$3
	# 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c SMJJ:energyHistoryFile`
					dataFile=`getValueFromIFIle ${iFile%.*}.m3c MARKOV_CHAIN:energyHistoryFile`
					
					energyCorrelationDiagramSaulo $dataFile $typeEcorr #"Er.vs.Et"
				fi
			fi
			;;

# 			if [ -n "$id" ]
# 			then
# 				energyCorrelationDiagram ${iFile%.*}.data/E_${availableEnergies[$id]}.ehistory $typeEcorr #"Et.vs.Ev"
# 			else
# # 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c SMJJ:energyHistoryFile`
# 				dataFile=`getValueFromIFIle ${iFile%.*}.m3c RMJJ:energyHistoryFile`
# 				energyCorrelationDiagram $dataFile $typeEcorr #"Er.vs.Et"
# 			fi
# 			;;
		all)
			if [ -n "$id" ]
			then
				historyDiagram ${iFile%.*}.data/${availableEnergies[$id]}.history
				speciesDiagram ${iFile%.*}.data/${availableEnergies[$id]}.histogram
				channelsDiagram ${iFile%.*}.data/${availableEnergies[$id]}.histogram
			else
				echo "MMMM"
			fi
			;;
	esac
	
}

main $*
