#!/bin/bash
##################################################################
#
#  This file is part of M3C
#  Copyright (C) by authors (2012-2016)
#  
#  Authors:
#    * Dr. Néstor F. Aguirre (2012-2016)
#          nestor.aguirre@uam.es
#    * Dr. Sergio Díaz-Tendero (2012-2015)
#          sergio.diaztendero@uam.es
#    * Prof. M. Paul-Antoine Hervieux (2012-2015)
#          Paul-Antoine.Hervieux@ipcms.unistra.fr
#    * Prof. Fernando Martín (2012-2015)
#          fernando.martin@uam.es
#    * Prof. Manuel Alcamí (2012-2015)
#          manuel.alcami@uam.es
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from M3C project.
#
##################################################################

FILTER="xyz"

##
# @brief
##
function filterIsomers()
{
	local resultsDir=$1
	
	local id1=""
	local id2=""
	local value=""
	local nAtoms1=""
	local nAtoms2=""
	
	pushd . &> /dev/null
	cd $resultsDir
	
	local categories=`ls *.$FILTER | awk 'BEGIN{FS="[-]"}{map[$1]=1}END{for(item in map) print item}'`
	
	for category in $categories
	do
		echo "   Group $category"
		
		local files=(`ls $category-*.$FILTER 2> /dev/null`)
		
		for id1 in `seq 0 $(( ${#files[@]} - 1 ))`
		do
			for id2 in `seq $(( $id1 + 1 )) $(( ${#files[@]} - 1 ))`
			do
				if [ ! -f ${files[$id1]} -o ! -f ${files[$id2]} ]
				then
					continue
				fi
				
				echo -n "      Comparing ${files[$id1]} <-> ${files[$id2]} ... "
				
				nAtoms=`gawk 'BEGIN{i=0}(NR>2 && $0!~/^[[:blank:]]*$/){i++}END{print i}' ${files[$id1]}`
				
				case "$nAtoms" in
					2)
						gamma=10.0
						;;
					3)
						gamma=5.0
						;;
					*)
						gamma=1.0
						;;
				esac
					
				test=`molecule.compare ${files[$id1]} ${files[$id2]} $gamma | grep OK | wc -l`
				
				if [ "$test" -eq 3 ]
				then
					echo "Equal"
					rm ${files[$id1]}
					break
				else
					echo "Different"
				fi
			done
		done
		
		echo ""
	done
	
	popd &> /dev/null
}

##
# @brief
##
function main()
{
	if [ "$1" = "xyz" -o "$1" = "rxyz" -o "$1" = "rxyz0" ]
	then
		FILTER=$1
		shift # $1 will be discarded
		local listDir=$*
	else
		local listDir=$*
	fi
	
	if [ -z "$listDir" ]
	then
		echo "usage:"
		echo "    M3C.mergeResults [xyz|rxyz|rxyz0] dir1 dir2 dir3 ... "
		echo "                           xyz                       "
		echo "    M3C.mergeResults [xyz|rxyz|rxyz0] results* "
		echo "                           xyz                       "
		exit
	fi
	
	categories=`ls $listDir | grep "$FILTER$" | gawk '($1!~/^[[:blank:]]*$/ && $1!~/:/)' | sed 's/.*\///g;s/-.*//g' | gawk '{map[$1]=1}END{for(key in map) print key}'`
	
	if [ -d "merge" ]
	then
		echo "@@@ WARNING @@@ There is already a merge directory (merge). Backup copy will be generated"
		mv merge merge.backup-`date +%Y%m%d`
	fi
	mkdir merge
	
	echo ""
	echo "-------------------"
	echo " Combining isomers "
	echo "-------------------"
	echo ""
	
	for category in $categories
	do
		i=1
		for dirName in $listDir
		do
			targetFiles=`ls $dirName/$category*.$FILTER 2> /dev/null`
			
			if [ -n "$targetFiles" ]
			then
				for target in $targetFiles
				do
					if [ "$FILTER" != "rxyz0" ]
					then
						echo "   $target"  " ----> "  "merge/$category-$i.$FILTER"
						cp $target merge/$category-$i.$FILTER
					else
						echo "   $target"  " ----> "  "merge/$category-$i.rxyz"
						cp $target merge/$category-$i.rxyz
					fi
					
					i=$(( i+1 ))
				done
			fi
		done
		echo ""
	done
	
	if [ "$FILTER" = "rxyz0" ]
	then
		FILTER="rxyz"
	fi
	
	echo "-------------------------------"
	echo " Checking for repeated isomers "
	echo "-------------------------------"
	echo ""
	filterIsomers merge
}

main $*

