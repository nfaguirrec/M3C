#!/bin/bash
##################################################################
#
#  This file is part of M3C
#  Copyright (C) by authors (2012-2016)
#  
#  Authors:
#    * Dr. Néstor F. Aguirre (2012-2016)
#          nestor.aguirre@uam.es
#    * Dr. Sergio Díaz-Tendero (2012-2015)
#          sergio.diaztendero@uam.es
#    * Prof. M. Paul-Antoine Hervieux (2012-2015)
#          Paul-Antoine.Hervieux@ipcms.unistra.fr
#    * Prof. Fernando Martín (2012-2015)
#          fernando.martin@uam.es
#    * Prof. Manuel Alcamí (2012-2015)
#          manuel.alcami@uam.es
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from M3C project.
#
##################################################################

FILTER="xyz"

##
# @brief
##
function filterIsomers()
{
	local resultsDir=$1
	
	local i=""
	local j=""
	local value=""
	local nAtoms1=""
	local nAtoms2=""
	
	cd $resultsDir
	
	local list=(`ls *.$FILTER 2> /dev/null`)
	
	for i in `seq 0 $(( ${#list[@]}-2 ))`
	do
		for j in `seq $(($i+1)) $(( ${#list[@]}-1 ))`
		do
			category1=${list[$i]%-*}
			category2=${list[$j]%-*}
			
			if [ "$category1" != "$category2" ]
			then
				continue
			fi

			# Check that target file has not been removed yet
			if [ ! -f "${list[$i]}" -o ! -f "${list[$j]}" ]
			then
				continue
			fi
			
			nAtoms1=`gawk 'BEGIN{i=0;nb=0}(NR>2 && $0~/^[[:blank:]]*$/){nb++}(NR>2 && nb<1){i++}END{print i}' ${list[$i]}`
			nAtoms2=`gawk 'BEGIN{i=0;nb=0}(NR>2 && $0~/^[[:blank:]]*$/){nb++}(NR>2 && nb<1){i++}END{print i}' ${list[$j]}`

			if [ "$nAtoms1" -ne "$nAtoms2" ]
			then
				echo "### ERROR ### Files ${list[$i]} and ${list[$j]} have not the same number of atoms"
				exit
			fi
			
			valueF=`molecule.compare ${list[$i]} ${list[$j]} 1.5 | grep "Chemical"`
			valueR=`molecule.compare ${list[$i]} ${list[$j]} 1.5 | grep "Radius"`
			valueI=`molecule.compare ${list[$i]} ${list[$j]} 1.5 | grep "Inertia"`
			
			if [ "$nAtoms1" -ge 2 ]
			then
				
				if [ "$valueF" = "Chemical formula ...  OK" ]
				then
					if [[ "$valueR" =~ "Radius ...  OK" ]]
					then
						if [[ "$valueI" =~ "Inertia moment ...  OK" ]]
						then
							rm "${list[$j]}"
						fi
					fi
				fi
				
			else # single atoms
			
				if [ "$valueF" = "Chemical formula ...  OK" ]
				then
					rm "${list[$j]}"
				fi
				
			fi
		done
	done
	
	cd ..
}

##
# @brief
##
function main()
{
	if [ "$1" = "xyz" -o "$1" = "rxyz" -o "$1" = "rxyz0" ]
	then
		FILTER=$1
		shift # $1 will be discarded
		local listDir=$*
	else
		local listDir=$*
	fi
	
	if [ -z "$listDir" ]
	then
		echo "usage:"
		echo "    M3C.mergeResults [xyz|rxyz|rxyz0] dir1 dir2 dir3 ... "
		echo "                           xyz                       "
		echo "    M3C.mergeResults [xyz|rxyz|rxyz0] results* "
		echo "                           xyz                       "
		exit
	fi
	
	categories=`ls $listDir | grep "$FILTER$" | gawk '($1!~/^[[:blank:]]*$/ && $1!~/:/)' | sed 's/.*\///g;s/-.*//g' | gawk '{map[$1]=1}END{for(key in map) print key}'`
	
	if [ -d "merge" ]
	then
		echo "@@@ WARNING @@@ There is already a merge directory (merge). Backup copy will be generated"
		mv merge merge.backup-`date +%Y%m%d`
	fi
	mkdir merge
	
	for category in $categories
	do
		i=1
		for dirName in $listDir
		do
			targetFiles=`ls $dirName/$category*.$FILTER 2> /dev/null`
			
			if [ -n "$targetFiles" ]
			then
				for target in $targetFiles
				do
					if [ "$FILTER" != "rxyz0" ]
					then
						printf "%60s%10s%40s\n" "$target"  "---->"  "merge/$category-$i.$FILTER"
						cp $target merge/$category-$i.$FILTER
					else
						printf "%60s%10s%40s\n" "$target"  "---->"  "merge/$category-$i.rxyz"
						cp $target merge/$category-$i.rxyz
					fi
					
					i=$(( i+1 ))
				done
			fi
		done
		echo ""
		echo ""
	done
	
	if [ "$FILTER" = "rxyz0" ]
	then
		FILTER="rxyz"
	fi
	
	echo -n "Filtering of repeated isomers ... "
	filterIsomers merge
	echo "OK"
}

main $*

