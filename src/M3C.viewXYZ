#!/bin/bash
#####################################################################################
#                                                                                   #
# This file is part of M3C project                                                  #
# Copyright (c) 2013-2016 Departamento de Química                                   #
#                         Universidad Autónoma de Madrid                            #
#                         All rights reserved.                                      #
#                                                                                   #
#                         * Néstor F. Aguirre (2013-2018)                           #
#                           nestor.aguirre@uam.es                                   #
#                           nfaguirrec@gmail.com                                    #
#                         * Sergio Díaz-Tendero (2013-2016)                         #
#                           sergio.diaztendero@uam.es                               #
#                         * M. Paul-Antoine Hervieux (2013-2015)                    #
#                           Paul-Antoine.Hervieux@ipcms.unistra.fr                  #
#                         * Manuel Alcamí (2013-2016)                               #
#                           manuel.alcami@uam.es                                    #
#                         * Fernando Martín (2013-2016)                             #
#                           fernando.martin@uam.es                                  #
#                         * Juan Pablo Sánchez                                      #
#                           juanp.sanchez@uam.es (2015-2015)                        #
#                                                                                   #
#  Redistribution and use in source and binary forms, with or without               #
#  modification, are permitted provided that the following conditions are met:      #
#                                                                                   #
#  1. Redistributions of source code must retain the above copyright notice, this   #
#     list of conditions and the following disclaimer.                              #
#  2. Redistributions in binary form must reproduce the above copyright notice,     #
#     this list of conditions and the following disclaimer in the documentation     #
#     and/or other materials provided with the distribution.                        #
#  3. Neither the name of the copyright holders nor the names of its contributors   #
#     may be used to endorse or promote products derived from this software         #
#     without specific prior written permission.                                    #
#                                                                                   #
#  The copyright holders provide no reassurances that the source code provided      #
#  does not infringe any patent, copyright, or any other intellectual property      #
#  rights of third parties.  The copyright holders disclaim any liability to any    #
#  recipient for claims brought against recipient by any third party for            #
#  infringement of that parties intellectual property rights.                       #
#                                                                                   #
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  #
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    #
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           #
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR  #
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;     #
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND      #
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       #
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS    #
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                     #
#                                                                                   #
#####################################################################################

# Known bug: Last versions of convert need to modify files as follows:
#            File: /etc/ImageMagick-6/policy.xml
#            Before:    <policy domain="coder" rights="none" pattern="EPS" />
#            After:     <policy domain="coder" rights="read|write" pattern="EPS" />


FILTER="rxyz"
NCOLUMNS=8
NROWS=14
ZOOM="IN"
SIZE="100"
ORIENT="FALSE"
RANDOM_ORIENT="TRUE"

# Internal variables
TABLE_HEADER="" 
MOL_ITERATOR=1
ENERGY_REF="0.0"

##
# @brief
##
function convertImage()
{
  local iFile=$1
  local oFile=$2
  
  if [ "$CONVERTER" = "convert" ]
  then
    convert $iFile $oFile > /dev/null 2>&1
  elif [ "$CONVERTER" = "inkscape" ]
  then
    inkscape -z -f $iFile -E $oFile > /dev/null 2>&1
  fi
}

##
# @brief
##
function makeLatexHeader()
{
	echo "\documentclass[10pt]{article}"
	echo "\usepackage[dvips]{graphicx,color}"
	echo "\usepackage{numprint}"
	echo "\voffset -2cm"
	echo "\oddsidemargin 0.0cm"
	echo "\evensidemargin -0.6cm"
	echo "\textheight 23cm"
	echo "\textwidth 16.5cm"
	echo "\begin{document}"
}

##
# @brief
##
function makeLatexFooter()
{
	echo "\end{document}"
}

##
# @brief
##
function makeLatexTableBase()
{
	local files=$*
	
	local nFiles=`echo $files | wc -w`
	local effSize=`echo "2.0*$SIZE/100.0" | bc -l`  # cm   1.6 for 100px
	local effSizeBlank=`echo "0.8*$effSize" | bc -l`
	local i=0
	
	echo "\vspace{0.5cm}"
	echo "\begin{tabular}{|"
	for i in `seq 1 $NCOLUMNS`
	do
		echo ">{\centering\arraybackslash}p{${effSize}cm}|"
	done
	echo "}"
	echo "\hline"
	
	if [ -n "$TABLE_HEADER" ]
	then
		if [ $MOL_ITERATOR -eq 1 ]
		then
			echo "\multicolumn{`echo "$NCOLUMNS $nFiles" | gawk '{print $1<$2?$1:$2}'`}{|c|}{$TABLE_HEADER} \\\\\hline"
			ENERGY_REF=`grep Energy $files | sort -k3 -n | head -n1 | awk '{print $3}'`
		else
			echo "\multicolumn{`echo "$NCOLUMNS $nFiles" | gawk '{print $1<$2?$1:$2}'`}{|c|}{$TABLE_HEADER (\textit{Continued from previous page})} \\\\\hline"
		fi
	fi
	
	i=1
	for f in $files
	do
		textFileName=`echo ${f%.*} | sed 's/_/\\\_/g'`
		
		symm=""
		[ -n "`grep "SYMMETRY" ${f%.*}.$FILTER`" ] && symm=`grep "SYMMETRY" ${f%.*}.$FILTER | gawk '{print $2}'`
		
		estate=""
		[ -n "`grep "ELECTRONIC_STATE" ${f%.*}.$FILTER`" ] && estate=`grep "ELECTRONIC_STATE" ${f%.*}.$FILTER | gawk '{print $2}'`
		
		relEnergy=""
		[ -n "`grep "Energy" ${f%.*}.$FILTER`" ] && relEnergy=`grep "Energy" ${f%.*}.$FILTER | gawk 'BEGIN{ eV=0.0367493088244753 }{printf("%10.2f",($3-('$ENERGY_REF'))/eV)}'`
		
		if (( $i%$NCOLUMNS != 0 && $i != $nFiles )) 
		then
			if [ -n "$symm" -a  -n "$estate" -a -n "$relEnergy" ]
			then
				echo "\includegraphics[width=${effSize}cm,height=${effSize}cm,keepaspectratio]{${f%.*}.eps} \tiny{${MOL_ITERATOR} \hspace{${effSizeBlank}cm} $textFileName \hspace{${effSizeBlank}cm} $estate~($symm) \hspace{${effSizeBlank}cm} \$$relEnergy\$~eV} &"
			elif [ -n "$symm" -a  -n "$estate" ]
			then
				echo "\includegraphics[width=${effSize}cm,height=${effSize}cm,keepaspectratio]{${f%.*}.eps} \tiny{${MOL_ITERATOR} \hspace{${effSizeBlank}cm} $textFileName \hspace{${effSizeBlank}cm} $estate~($symm)} &"
			else
				echo "\includegraphics[width=${effSize}cm,height=${effSize}cm,keepaspectratio]{${f%.*}.eps} \tiny{${MOL_ITERATOR} \hspace{${effSizeBlank}cm} $textFileName} &"
			fi
		else
			if [ -n "$symm" -a  -n "$estate" -a -n "$relEnergy" ]
			then
				echo "\includegraphics[width=${effSize}cm,height=${effSize}cm,keepaspectratio]{${f%.*}.eps} \tiny{${MOL_ITERATOR} \hspace{${effSizeBlank}cm} $textFileName \hspace{${effSizeBlank}cm} $estate~($symm) \hspace{${effSizeBlank}cm} \$$relEnergy\$~eV} "
			elif [ -n "$symm" -a  -n "$estate" ]
			then
				echo "\includegraphics[width=${effSize}cm,height=${effSize}cm,keepaspectratio]{${f%.*}.eps} \tiny{${MOL_ITERATOR} \hspace{${effSizeBlank}cm} $textFileName \hspace{${effSizeBlank}cm} $estate~($symm)} "
			else
				echo "\includegraphics[width=${effSize}cm,height=${effSize}cm,keepaspectratio]{${f%.*}.eps} \tiny{${MOL_ITERATOR} \hspace{${effSizeBlank}cm} $textFileName} "
			fi
			
			if (( $i != $nFiles ))
			then
				echo "\\\\\hline"
			else
				if (( $i == $NCOLUMNS ))
				then
					echo "\\\\\cline{1-$NCOLUMNS}"
				else
					echo "\\\\\cline{1-$(($i%$NCOLUMNS))}"
				fi
			fi
		fi
		
		i=$(( $i+1 ))
		MOL_ITERATOR=$(( ${MOL_ITERATOR}+1 ))
	done

	echo "\end{tabular}"
	echo ""
}

##
# @brief
##
function makeLatexTable()
{
	local files=$*
	
	local nFiles=`echo $files | wc -w`
	local effSize=`echo "2.0*$SIZE/100.0" | bc -l`  # cm   1.6 for 100px
	local list=""
	
	echo $files | awk 'BEGIN{RS=" "; id=1; n=1}{print $1 > sprintf("%05d.mkgroup",id); if(n%'$(($NCOLUMNS*$NROWS))'==0){ id=id+1;}; n=n+1}'
	
	for item in `ls *.mkgroup`
	do
		list=`cat $item`
# 		list=`cat $item | sed 's/:Energy =//g' | sort -k2 -n | awk '{print $1}'`
		
		makeLatexTableBase $list
	done
	
	rm *.mkgroup
}

##
# @brief
##
function buildGifFiles()
{
	local iFile=""
	local sID=""
	
	local effSize=`echo "100*$SIZE/100.0" | bc -l`  # 100px para 100%
	
	echo "--------------------"
	echo " Building GIF files"
	echo "--------------------"
	
	for iFile in `ls *.$FILTER`
	do
		echo -n "$iFile ... "
		
		if [ -f ${iFile%.*}.gif ]
		then
			echo "OK*"
			continue
		fi
		
		sID=$RANDOM
		
		if [ "$RANDOM_ORIENT" == "TRUE" ]
		then
			molecule.rotate -i $iFile -random T > rand${iFile}${sID}
		elif [ "$ORIENT" == "TRUE" ]
		then
			molecule.orient -i $iFile > rand${iFile}${sID}
		else
			cp $iFile rand${iFile}${sID}
		fi
		
		cat > geom$sID.jmol << EOF
load "rand${iFile}${sID}"
background [255,255,255]
wireframe 0.15; spacefill 23%

moveto 0 1 0 0 -90
zoom $ZOOM
write image $effSize $effSize ${iFile%.*}.gif
EOF
		
		$JAVA_INTERP -jar $M3C_HOME/utils/Jmol.jar -xin -s geom$sID.jmol -L -n -b  > /dev/null 2>&1
		rm geom$sID.jmol
		
		rm rand${iFile}${sID}
		
		echo "OK"
	done
}

##
# @brief
##
function buildEPSFiles()
{
	local iFile=""
	local sID=""
	
	local effSize=`echo "100.0*$SIZE/100.0" | bc`  # 100px para 100%
	
	echo "--------------------"
	echo " Building EPS files"
	echo "--------------------"
	
	for iFile in `ls *.$FILTER`
	do
		echo -n "$iFile ... "
		
		if [ -f ${iFile%.*}.eps ]
		then
			echo "OK*"
			continue
		fi
		
		sID=$RANDOM
		
		if [ "$RANDOM_ORIENT" == "TRUE" ]
		then
			molecule.rotate -i $iFile -random T > rand${iFile}${sID}
		elif [ "$ORIENT" == "TRUE" ]
		then
			molecule.orient -i $iFile > rand${iFile}${sID}.xyz
			molecule.rotate -i rand${iFile}${sID}.xyz -beta 1.5707963267949 -gamma 1.5707963267949 > rand${iFile}${sID}
			rm rand${iFile}${sID}.xyz
		else
			cp $iFile rand${iFile}${sID}
		fi
		
		cat > geom$sID.jmol << EOF
# set bondTolerance 0.75
load "rand${iFile}${sID}"
background [255,255,255]
wireframe 0.15; spacefill 23%
moveto 0 1 0 0 -90
zoom $ZOOM
write image $effSize $effSize ${iFile%.*}.gif
EOF
	
		$JAVA_INTERP -jar $M3C_HOME/utils/Jmol.jar -xin -s geom$sID.jmol -L -n -b  > /dev/null 2>&1
		convertImage ${iFile%.*}.gif ${iFile%.*}.eps
		rm ${iFile%.*}.gif geom$sID.jmol
		
		rm rand${iFile}${sID}

		echo "OK"
	done
}

##
# @brief
##
function storeTemporaryFiles()
{
	if [ -d "geometries.data" ]
	then
		echo "@@@ WARNING @@@ There is already a data directory (geometries.data). Backup copy will be generated"
		mv geometries.data geometries.data.backup
	fi
	mkdir geometries.data
	
	echo -n "Storing TEX file ( geometries.data ) ... "
	mv geometries*.tex geometries.data
	echo "OK"
	
	echo -n "Storing EPS files ( geometries.data ) ... "
	for item in `ls *.$FILTER`
	do
		mv ${item%.*}.eps geometries.data
	done
	echo "OK"
}

##
# @brief
##
function geometriesByCategories()
{
	local list=""
	
	echo "----------------------------------------"
	echo " Generating report: geometries.sort.pdf "
	echo "----------------------------------------"
	
	echo -n "Generating Latex document ... "
	
	makeLatexHeader > geometries-$$.tex
	
	cat /dev/null > .molValues$$
	
	ls *.$FILTER \
	| while read line
	do
		fileName=`echo $line | gawk '{print $1}'`
		charge=`echo $fileName | gawk 'BEGIN{FS="[.]+"}{print $2}' | sed 's/q//g'`
		
		if [ -z "$charge" ]; then charge=0; fi
		
		if [ "$charge" -eq 0 ]
		then
			strCharge=""
		elif [ "$charge" -eq 1 ]
		then
			strCharge="$^{+}$"
		elif [ "$charge" -ge 2 ]
		then
			strCharge="$^{$charge+}$"
		fi
		
		echo `M3C.molecule.hashKey $fileName` $fileName `molecule.chemicalFormula $fileName`$strCharge $energy >> .molValues$$
	done
	
	categories=`sort -k1 -n .molValues$$ | gawk '{ if( $3 in map ){ a=1 }else{ print $3 }; map[$3]=1 }'`
	
	for item in $categories
	do
		list=`awk '($3=="'$item'"){print $0}' .molValues$$ | sort -k1 -n | gawk '{print $2}'`
		
		TABLE_HEADER=`echo $item | sed -r 's/([[:alpha:]]+)([[:digit:]]+)/\1\\$_{\2}\\$/g' | sed -r 's/[$]{2,}//g'`
		
		MOL_ITERATOR=1
		makeLatexTable $list >> geometries-$$.tex
	done
	
	rm .molValues$$
	
	makeLatexFooter >> geometries-$$.tex

	echo "OK"
	
	echo -n "Compiling Latex document ... "
	latex geometries-$$.tex > /dev/null 2>&1
	dvipdf geometries-$$.dvi > /dev/null 2>&1
	echo "OK"
	
	echo -n "Cleaning temporal files ... "
	rm geometries-$$.aux geometries-$$.log geometries-$$.dvi
	mv geometries-$$.tex geometries.sort.tex
	mv geometries-$$.pdf geometries.sort.pdf
	echo "OK"
	
	if [ -n "$DISPLAY" ]
	then
		okular geometries.sort.pdf > /dev/null 2>&1 &
	fi
}

##
# @brief
##
function geometries()
{
	echo "-----------------------------------"
	echo " Generating report: geometries.pdf "
	echo "-----------------------------------"
	
	echo -n "Generating Latex document ... "
	
	makeLatexHeader > geometries-$$.tex
	
	cat /dev/null > .molValues$$
	ls *.$FILTER \
	| while read fileName
	do
		echo `M3C.molecule.hashKey $fileName` $fileName >> .molValues$$
	done
	sortedList=`sort -k1 -n .molValues$$ | gawk '{print $2}'`
	
	MOL_ITERATOR=1
	ENERGY_REF=`grep Energy $sortedList | sort -k3 -n | head -n1 | awk '{print $3}'`
	makeLatexTable $sortedList >> geometries-$$.tex
	
	makeLatexFooter >> geometries-$$.tex

	echo "OK"
	
	echo -n "Compiling Latex document ... "
	latex geometries-$$.tex > /dev/null 2>&1
	dvipdf geometries-$$.dvi > /dev/null 2>&1
	echo "OK"
	
	echo -n "Cleaning temporal files ... "
	rm geometries-$$.aux geometries-$$.log geometries-$$.dvi
	mv geometries-$$.tex geometries.tex
	mv geometries-$$.pdf geometries.pdf
	echo "OK"
	
	if [ -n "$DISPLAY" ]
	then
		okular geometries.pdf > /dev/null 2>&1 &
	fi
}

##
# @brief
##
function checkDependencies()
{
	JAVA_INTERP=""
	if [ -n "`which gij`" ]
	then
		JAVA_INTERP="gij"
	elif [ -n "`which java`" ]
	then
		JAVA_INTERP="java"
	else
		echo "### Error ### It's neccessary to have installed an interpreter for Java bytecode, e.g. java or gij"
		exit
	fi

	if [ -z "`echo $DISPLAY`" ] 
	then 
		if [ -n "`which xvfb-run`" ]
		then
			JAVA_INTERP="xvfb-run $JAVA_INTERP"
		else
			echo "### Error ### It's neccessary to have installed a display server, e.g. xvfb-run"
			exit
		fi
					
	else
		JAVA_INTERP="$JAVA_INTERP"
	fi
  
	CONVERTER=""
	if [ -z "$CONVERTER" -a -n "`which convert`" ]
	then
    version=`convert -version | gawk '{split($3,arr,"."); print arr[1]; exit}'`
    
    if [ "$version" -g 6 ]
    then
      CONVERTER=convert
    fi
  fi
	if [ -z "$CONVERTER" -a -n "`which inkscape`" ]
	then
    CONVERTER=inkscape
	else
		echo "### Error ### It's neccessary to have installed an image converter, e.g. convert(version<6) or inkscape"
		exit
	fi
}

##
# @brief
##
function main()
{
	###### Reading from input line######
	local oType=$1  # unsorted|sorted|gif
	FILTER=$2  # xyz
	NCOLUMNS=$3  # 6
	NROWS=$4  # 8
	ZOOM=$5  # IN | 30 | 50
	SIZE=$6  # 100
	ORIENT=$7 # TRUE
	RANDOM_ORIENT=$8 # FALSE
	local highlight=$9  # 1,4,5
	####################################
	

	##### Defining default values ######
	if [ -z "$oType" ] ; then oType="none"; fi
	if [ -z "$FILTER" ] ; then FILTER="xyz";fi
	if [ -z "$NCOLUMNS" ] ; then NCOLUMNS=6; fi
	if [ -z "$NROWS" ] ; then NROWS=8; fi
	if [ -z "$ZOOM" ] ; then ZOOM="100"; fi
	if [ -z "$SIZE" ] ; then SIZE="100"; fi
	if [ -z "$ORIENT" ] ; then ORIENT="TRUE"; fi
	if [ -z "$RANDOM_ORIENT" ] ; then RANDOM_ORIENT="FALSE"; fi
	####################################
	
	checkDependencies

	### INPUT CHECK#####################
	echo ""
	echo "Output file type: $oType"
	echo "Input file filter: $FILTER"
	echo "Number of Columns: $NCOLUMNS"
	echo "Number of Rows: $NROWS"
	echo "Zoom: $ZOOM"
	echo "Size: ${SIZE}%"
	echo "Orient: $ORIENT"
	echo "Random orientation? ${RANDOM_ORIENT}"
	echo "Highlighted structures: $highlight"
	echo ""
	echo "Java: $JAVA_INTERP"
	echo "Converter: $CONVERTER"
	echo ""
	####################################

	case $oType in
		u-pdf)
			buildEPSFiles
			geometries $highlight
			storeTemporaryFiles
			;;
		s-pdf)
			buildEPSFiles
			geometriesByCategories
			storeTemporaryFiles
			;;
		pdf)
			buildEPSFiles
			geometries $highlight
			geometriesByCategories
			storeTemporaryFiles
			;;
		gif)
			buildGifFiles
			;;
		*)
			echo "Usage: M3C.viewXYZ (u-pdf|s-pdf|pdf|gif) (xyz|rxyz) [number-of-columns] [number-of-rows] [zoom] [size] [orient] [random] [highlight-list]"
			echo "defaults:                                                    6                  8         100    100     TRUE    FALSE                  "
			echo ""
			echo "   @@ WARNING @@ Option to highlight molecules has been disabled in this version"
			;;
	esac
}

main $*
