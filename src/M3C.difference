#!/bin/bash
##################################################################
#
#  This file is part of M3C
#  Copyright (C) by authors (2016-2016)
#  
#  Authors:
#    * Dr. NÃ©stor F. Aguirre (2016-2016)
#          nestor.aguirre@uam.es
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from M3C project.
#
##################################################################

FILTER="xyz"

BONDING_TOL_SCALE=1.2  # Se consideran unidos aquellos atomos que satisfacen dij < (Rci+Rcj)*alpha
# SIMILARITY_THR=0.92 # coarse
SIMILARITY_THR=0.97 # fine

##
# @brief
##
function main()
{
	if [ "$1" = "xyz" -o "$1" = "rxyz" -o "$1" = "rxyz0" ]
	then
		FILTER=$1
	fi
	
	local dir1=$2
	local dir2=$3
	
	if [ -z "$dir1" -o -z "$dir2" ]
	then
		echo "usage:"
		echo "    M3C.difference [xyz|rxyz] dir1 dir2"
		echo "                      xyz              "
		exit
	fi
	
	categories1=`ls $dir1 | grep "$FILTER$" | gawk '($1!~/^[[:blank:]]*$/ && $1!~/:/)' | sed 's/.*\///g;s/-.*//g' | gawk '{map[$1]=1}END{for(key in map) print key}'`
	
	if [ -d "difference" ]
	then
		echo "@@@ WARNING @@@ There is already a difference directory (difference). Backup copy will be generated"
		mv difference difference.backup-`date +%Y%m%d`
	fi
	mkdir difference
	
	echo ""
	echo -n "Copying files from $dir1 to difference ... "
	cp $dir1/*.$FILTER difference/
	echo "OK"
	
	echo ""
	echo "----------------------"
	echo " Checking differences "
	echo "----------------------"
	echo ""
	
	for category in $categories1
	do
		pointerFiles=`ls $dir2/$category*.$FILTER 2> /dev/null`
		targetFiles=`ls difference/$category*.$FILTER 2> /dev/null`
		
		if [ -n "$pointerFiles" -a -n "$targetFiles" ]
		then
			for pointer in $pointerFiles
			do
				for target in $targetFiles
				do
					
					if [ ! -f $pointer -o ! -f $target ]
					then
						continue
					fi
					
					echo -n "      Comparing $pointer --> $target ... "
					
					test=`molecule.compare $pointer $target false $SIMILARITY_THR $BONDING_TOL_SCALE | grep OK | wc -l`
					
					if [ "$test" -eq 3 ]
					then
						echo "Equal"
						rm $target
						break
					else
						echo "Different"
					fi
				done
			done
		fi
		echo ""
	done
}

main $*

