#!/bin/bash
##################################################################
#
#  This file is part of M3C
#  Copyright (C) by authors (2012-2015)
#  
#  Authors:
#    * Dr. Néstor F. Aguirre (2012-2015)
#          nestor.aguirre@uam.es
#    * Dr. Sergio Díaz-Tendero (2012-2015)
#          sergio.diaztendero@uam.es
#    * Prof. M. Paul-Antoine Hervieux (2012-2015)
#          Paul-Antoine.Hervieux@ipcms.unistra.fr
#    * Prof. Fernando Martín (2012-2015)
#          fernando.martin@uam.es
#    * Prof. Manuel Alcamí (2012-2015)
#          manuel.alcami@uam.es
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from M3C project.
#
##################################################################

runM3C(){
	local iFile=$1
	local energy=$2
	local keepOutputFiles=$3

	# @todo Si excitationEnergy no está en el input el programa se cae. Hay que verificar primero su existencia
	sed -r -i 's/(^[[:blank:]]*)excitationEnergy = .*$/\1excitationEnergy = '${energy}' # eV  <-- Generated by M3C.p/g' $iFile
	sed -r -i 's/(^[[:blank:]]*)geometryHistoryFilePrefix = .*$/\1geometryHistoryFilePrefix = E_'${energy}'-geom #  <-- Generated by M3C.p/g' $iFile
	sed -r -i 's/(^[[:blank:]]*)energyHistoryFile = .*$/\1energyHistoryFile = E_'${energy}'.ehistory #  <-- Generated by M3C.p/g' $iFile
	sed -r -i 's/(^[[:blank:]]*)weightHistoryFile = .*$/\1weightHistoryFile = E_'${energy}'.whistory #  <-- Generated by M3C.p/g' $iFile
	sed -r -i 's/(^[[:blank:]]*)JHistoryFile = .*$/\1JHistoryFile = E_'${energy}'.jhistory #  <-- Generated by M3C.p/g' $iFile
	sed -r -i 's/(^[[:blank:]]*)LHistoryFile = .*$/\1LHistoryFile = E_'${energy}'.lhistory #  <-- Generated by M3C.p/g' $iFile
	sed -r -i 's/(^[[:blank:]]*)histogramFile = .*$/\1histogramFile = E_'${energy}'.histogram #  <-- Generated by M3C.p/g' $iFile
	sed -r -i 's/(^[[:blank:]]*)(END MARKOV_CHAIN[[:blank:]]*$)/\1\tgenEbkl = TRUE  #  <-- Generated by M3C.p\n\1\2/g' $iFile
	
	if [ "$keepOutputFiles" = "1" ]
	then
		M3C -i $iFile > ${iFile%.*}.out
	else
		M3C -i $iFile > /dev/null
	fi
}

main(){
	local i=0
	local j=0
	local ij=0
	local iFile=""
	local nThreads=""
	local outputDir=""
# 	local scratch=""
# 	local work=""
	local iFileEff=""

    if [ -n "$SLURM_NTASKS" ]
    then
            nThreads=$SLURM_NTASKS
    else
            nThreads=`cat /proc/cpuinfo | grep processor | wc -l`
    fi

	while getopts "i:n:" OPTNAME
	do
			case $OPTNAME in
					"i" )
							iFile=$OPTARG
							;;
					"n" )
							nThreads=$OPTARG
							;;
					* )
							exit
							;;
			esac
	done
	
	if [ -z "$iFile" ]
	then
			echo "Usage:"
			echo "      $ M3C.p -i iFile.inp [ -n nThreads ]"
			exit
	fi
	
	outputDir="$PWD/${iFile%.*}.data"
	
	#-----------------------------------------------------------------------
	# La variable de salida de este bloque es el vector energy el resto de 
	# variables definidas no deberían de utilizarse más adelante
	#-----------------------------------------------------------------------
	if [ -z "`grep "ENERGY_RANGE" $iFile`" ]
	then
		echo "### ERROR ### M3C.p. Check your input file $iFile, ENERGY_RANGE block is required."
		exit 0
	fi
	gawk 'BEGIN{ loc=0 }{ if($0~/END ENERGY_RANGE/) loc=0; if(loc==1) print $0; if( $0~/BEGIN ENERGY_RANGE/ ) loc=1 }' $iFile > .$iFile-erange$$
	
	gridType=`gawk '($1~/grid/){ split($3,arr,":"); if( arr[1]=="file" ) print "file"; else print "range" }' .$iFile-erange$$`
	keepOutputFiles=`gawk '($1~/keepOutputFiles/){ print $3 }' .$iFile-erange$$`
	
	if [ "$gridType" = "range" ]
	then
	
		minEnergy=`gawk '($1~/grid/){ split($3,arr,":"); print arr[1] }' .$iFile-erange$$`
		maxEnergy=`gawk '($1~/grid/){ split($3,arr,":"); print arr[2] }' .$iFile-erange$$`
		nPointsEnergy=`gawk '($1~/grid/){ split($3,arr,":"); print arr[3] }' .$iFile-erange$$`
		
		energyStepSize=`echo "($maxEnergy-($minEnergy))/($nPointsEnergy-1.0)" | bc -l`
		
		energy=( `seq -s " " -f "%10.5f" $minEnergy $energyStepSize $maxEnergy` )
		
	elif [ "$gridType" = "file" ]
	then
	
		gridFile=`gawk '($1~/grid/){ split($3,arr,":"); print arr[2] }' .$iFile-erange$$`
		
		energy=( `gawk '($1!~/^[[:blank:]]*#/){ print $1 }' $gridFile` )
	fi
	
	rm .$iFile-erange$$
	
	#-----------------------------------------------------------------------
	
	startTime=`date "+%s"`
	
	pushd . > /dev/null 2> /dev/null
	
	if [ -d "$outputDir" ]
	then
		echo "### ERROR ### There is already an output directory ($outputDir), please remove or rename it before to run the calculation"
		exit
	else
		mkdir $outputDir
	fi
	cp $iFile $outputDir
	cp *.xyz $outputDir &> /dev/null
	cp *.rxyz $outputDir &> /dev/null
	cp *.molden $outputDir &> /dev/null
	cd $outputDir
	
	ij=0
	for (( i=0; i<=$(( ${#energy[@]}/$nThreads-1 )); i++ ))
	do
		iStartTime=`date "+%s"`
		
		echo -n "Running: "
		
		for (( j=1; j<=$nThreads; j++ ))
		do
			ij=$(( $j-1+$nThreads*$i ))
			
			iFileEff="E_${energy[$ij]}.inp"
			cp $iFile $iFileEff
			
			if (( j != $nThreads ))
			then
				printf "%10.5f," "${energy[$ij]}"
			else
				printf "%10.5f" "${energy[$ij]}"
			fi
			
			runM3C $iFileEff ${energy[$ij]} $keepOutputFiles &
		done
		
		echo -n " ... "
		
		wait
		
		iEndTime=`date "+%s"`
		elapsedTime=$(( $iEndTime-$iStartTime ))
		echo "OK     Time elapsed: $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	done

	if (( $ij < ${#energy[@]} ))
	then
		iStartTime=`date "+%s"`
		
		echo -n "Running: "
		
		k=1
		for (( i=$(( $ij+1 )); i<${#energy[@]}; i++ ))
		do
			iFileEff="E_${energy[$i]}.inp"
			cp $iFile $iFileEff
			
			if (( $i != $(( ${#energy[@]} - 1 )) ))
			then
				printf "%10.5f," "${energy[$i]}"
			else
				printf "%10.5f " "${energy[$i]}"
			fi
			
			runM3C $iFileEff ${energy[$i]} $keepOutputFiles &
			
			k=$(( $k+1 ))
		done
		
		for (( i=$k; i<=$nThreads; i++ ))
		do
			if (( i != $nThreads ))
			then
				printf "%10s " ""
			else
				printf "%10s" ""
			fi
		done
		
		echo -n " ... "
		
		wait
		
		iEndTime=`date "+%s"`
		elapsedTime=$(( $iEndTime-$iStartTime ))
		echo "OK     Time elapsed: $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	fi
	
	rm $iFile
	rm `ls *.xyz | grep -E -v "^E_[[:digit:].-]+"`
	
	popd . > /dev/null 2> /dev/null
	
	echo -n "         "
	for (( j=1; j<=$nThreads; j++ ))
	do
		printf "%10s" ""
	done
	
	endTime=`date "+%s"`
	elapsedTime=$(( $endTime-$startTime ))
	
	echo -n "         "
	printf "%$(( ${nThreads} + 2 ))s" ""
	echo "       Total: $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	
	#-----------------------------------------------------------------------
}

main $*
