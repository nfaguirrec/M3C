#!/bin/bash
#####################################################################################
#                                                                                   #
# This file is part of M3C project                                                  #
# Copyright (c) 2013-2016 Departamento de Química                                   #
#                         Universidad Autónoma de Madrid                            #
#                         All rights reserved.                                      #
#                                                                                   #
#                         * Néstor F. Aguirre (2013-2016)                           #
#                           nestor.aguirre@uam.es                                   #
#                         * Sergio Díaz-Tendero (2013-2016)                         #
#                           sergio.diaztendero@uam.es                               #
#                         * M. Paul-Antoine Hervieux (2013-2015)                    #
#                           Paul-Antoine.Hervieux@ipcms.unistra.fr                  #
#                         * Manuel Alcamí (2013-2016)                               #
#                           manuel.alcami@uam.es                                    #
#                         * Fernando Martín (2013-2016)                             #
#                           fernando.martin@uam.es                                  #
#                                                                                   #
#  Redistribution and use in source and binary forms, with or without               #
#  modification, are permitted provided that the following conditions are met:      #
#                                                                                   #
#  1. Redistributions of source code must retain the above copyright notice, this   #
#     list of conditions and the following disclaimer.                              #
#  2. Redistributions in binary form must reproduce the above copyright notice,     #
#     this list of conditions and the following disclaimer in the documentation     #
#     and/or other materials provided with the distribution.                        #
#  3. Neither the name of the copyright holders nor the names of its contributors   #
#     may be used to endorse or promote products derived from this software         #
#     without specific prior written permission.                                    #
#                                                                                   #
#  The copyright holders provide no reassurances that the source code provided      #
#  does not infringe any patent, copyright, or any other intellectual property      #
#  rights of third parties.  The copyright holders disclaim any liability to any    #
#  recipient for claims brought against recipient by any third party for            #
#  infringement of that parties intellectual property rights.                       #
#                                                                                   #
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND  #
#  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED    #
#  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           #
#  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR  #
#  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES   #
#  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;     #
#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND      #
#  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT       #
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS    #
#  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                     #
#                                                                                   #
#####################################################################################

eV=0.0367493088244753

BONDING_TOL_SCALE=1.1  # Se consideran unidos aquellos atomos que satisfacen dij < (Rci+Rcj)*alpha
SIMILARITY_THR=0.90 # coarse2
#SIMILARITY_THR=0.92 # coarse
#SIMILARITY_THR=0.97 # fine
USEMASSWEIGHT="FALSE"
USEIM="FALSE"
USENODEWEIGHTS="TRUE"
USEEDGEWEIGHTS="FALSE"

ENERGY_WINDOW=`echo "1.0*$eV" | bc -l | awk '{printf("%.5f",$1)}'`

if [ -f "$M3C_HOME/bin/parallel.sh" ]
then
        source $M3C_HOME/bin/parallel.sh
else
        source $M3C_HOME/src/parallel.sh
fi

##
# @brief
##
function checkPair()
{
	local iFile1=$1
	local iFile2=$2
	local energy1=$3
	local energy2=$4
	
	if [ ! -f $iFile1 -o ! -f $iFile2 ]
	then
		return 1
	fi
	
	if [ -n "$energy1" -a -n "$energy2" ]
	then
		local dE=`echo "sqrt(($energy1-($energy2))^2)" | bc -l | awk '{printf("%.5f",$1)}'`
		echo "      Comparing $iFile1 <-> $iFile2 >>>>> dE=$dE"
	else
		echo "      Comparing $iFile1 <-> $iFile2"
	fi
	
	test=`molecule.compare $iFile1 $iFile2 false $SIMILARITY_THR $BONDING_TOL_SCALE | grep OK | wc -l`
	
	if [ "$test" -eq 3 ]
	then
# 		echo -n "Equal"
		
		if [ "$forceRemove" = "TRUE" ]
		then
			echo "      --> Removed ($iFile2)"
			rm $iFile2
		else
			echo "      --> Removed ($iFile2)"
# 			echo ""
		fi
		
# 					break
# 	else
# 		echo "Different"
	fi
}

# ##
# # @brief
# # @todo Esta función se utiliza en varios script, así que hay que centralizarla. OJO en este fichero no tiene el rm
# ##
# function checkRepeated()
# {
# 	local format=$1
# 	local resultsDir=$2
# 	local forceRemove=$3
# 	
# 	local id1=""
# 	local id2=""
# 	local value=""
# 	local nAtoms1=""
# 	local nAtoms2=""
# 	
# 	if [ -z "$M3C_NTHREADS" ]
# 	then
# 			M3C_NTHREADS=`cat /proc/cpuinfo | grep processor | wc -l`
# 	fi
# 	nThreads=$((20*$M3C_NTHREADS))
# # 	nThreads=1
# 	REFRESH_TIME="0s"
# 	
# 	pushd . &> /dev/null
# 	cd $resultsDir
# 	
# 	local categories=`ls *.$format | awk 'BEGIN{FS="[-]"}{map[$1]=1}END{for(item in map) print item}'`
# 	
# # 	cat /dev/null > .commands$$
# 	
# 	for category in $categories
# 	do
# # 		local files=(`ls $category-*.$format 2> /dev/null`)
# 		#@todo Para usar la energia hay que asegurarse que todas las moleculas tienen la energi, de lo contrario se debe usar el anterior esquema
# 		
# 		grep Energy $category-*.$format | sort -k3 -n | sed 's/:Energy =//g' 2> /dev/null > .data$$
# 		local files=(`cat .data$$ | awk '{print $1}' 2> /dev/null`)
# 		local energies=(`cat .data$$ | awk '{print $2}' 2> /dev/null`)
# 		rm .data$$
# 		
# 		for id1 in `seq 0 $(( ${#files[@]} - 1 ))`
# 		do
# 			for id2 in `seq $(( $id1 + 1 )) $(( ${#files[@]} - 1 ))`
# 			do
# 				if [ "`echo "sqrt((${energies[$id1]}-(${energies[$id2]}))^2) <= $ENERGY_WINDOW" | bc -l`" -eq "1" ]
# 				then
# # 					echo "checkPair ${files[$id1]} ${files[$id2]}" >> .commands$$
# 					checkPair ${files[$id1]} ${files[$id2]} ${energies[$id1]} ${energies[$id2]}
# 				fi
# 			done
# 		done
# 	done
# 	
# # 	parallel .commands$$ $nThreads
# # 	rm .commands$$
# 	
# 	popd &> /dev/null
# }

##
# @brief
##
function checkRepeated()
{
	local format=$1
	local resultsDir=$2
	local forceRemove=$3
	
	pushd . &> /dev/null
	cd $resultsDir
	
	find . -maxdepth 1 -name  "*.$format" | sed -r 's/^\.\///g' > .list$$
	
	# molecule.duplicate file [remove] [ debug ] [ thr ] [alpha] [useMassWeight] [useIm] [useNodeWeights] [useEdgeWeights]
	#                           false     false     0.92    1.1        true        true        true              true     

	molecule.duplicate .list$$ $forceRemove false $SIMILARITY_THR $BONDING_TOL_SCALE $USEMASSWEIGHT $USEIM $USENODEWEIGHTS $USEEDGEWEIGHTS
	
	rm .list$$
	
	popd &> /dev/null
}

##
# @brief
##
function checkConsistence()
{
	local format=$1
	local forceRemove=$2
	
	for ifile in `find . -maxdepth 1 -name  "*.$format" | sed -r 's/^\.\///g'`
	do
		echo -n "   Checking $ifile ... "
		
		formulaFromFileName=`echo $ifile | awk 'BEGIN{FS="[.-]"}{print $1}'`
		chargeID=`echo $ifile | awk 'BEGIN{FS="[.-]"}{print $2}'`
		multID=`echo $ifile | awk 'BEGIN{FS="[.-]"}{print $3}'`
		isomerID=`echo $ifile | awk 'BEGIN{FS="[.-]"}{print $4}'`
		
		if [ "$formulaFromFileName" != "`molecule.chemicalFormula $ifile`" ]
		then
			
			if [ "$forceRemove" = "TRUE" ]
			then
				echo "Failed(formula) --> Removed"
				rm $ifile
				continue
			else
				echo ""
				echo "### ERROR ### Inconsistency in filename ( $formulaFromFileName --> `molecule.chemicalFormula $ifile` )"
				kill $$
			fi
		fi
		
		if [[ ! "$chargeID" =~ ^q[0-9]+$ ]]
		then
			if [ "$forceRemove" = "TRUE" ]
			then
				echo "Failed(charge) --> Removed"
				rm $ifile
				continue
			else
				echo ""
				echo "### ERROR ### Inconsistency in chargeID ( $chargeID --> q[0-9]+ )"
				kill $$
			fi
		fi
		
		if [[ ! "$multID" =~ ^m[1-9]+$ ]]
		then
			if [ "$forceRemove" = "TRUE" ]
			then
				echo "Failed(mult) --> Removed"
				rm $ifile
				continue
			else
				echo ""
				echo "### ERROR ### Inconsistency in multID ( $multID --> m[1-9]+ )"
				kill $$
			fi
		fi
		
		if [[ ! "$isomerID" =~ ^[0-9]+$ ]]
		then
			if [ "$forceRemove" = "TRUE" ]
			then
				echo "Failed(id) --> Removed"
				rm $ifile
				continue
			else
				echo ""
				echo "### ERROR ### Inconsistency in isomerID ( $isomerID --> [0-9]+ )"
				kill $$
			fi
		fi
		
		if [ "$format" = "rxyz" -o "$format" = "rxyz0" ]
		then
			nFreqFromFile=`grep FREQUENCIES $ifile | awk '{print $2}'`
			nFreqExpected=`molecule.fv $ifile | awk '{print $1}'`
			
			if [ "$nFreqFromFile" -ne "$nFreqExpected" ]
			then
				if [ "$forceRemove" = "TRUE" ]
				then
					echo "Failed(frequencies) --> Removed"
					rm $ifile
					continue
				else
					echo ""
					echo "### ERROR ### Inconsistency in number of frequencies ( $nFreqFromFile --> $nFreqExpected )"
					kill $$
				fi
			fi
			
			energyFromFile=`grep Energy $ifile | awk '{print $3}'`
			
			if [[ ! "$energyFromFile" =~ ^[-]*[0-9]+.[0-9]+$ ]]
			then
				if [ "$forceRemove" = "TRUE" ]
				then
					echo "Failed(energy) --> Removed"
					rm $ifile
					continue
				else
					echo ""
					echo "### ERROR ### Inconsistency in value of energy ( $energyFromFile )"
					kill $$
				fi
			fi
		fi
		
		echo "OK"
	done
}

##
# @brief
##
function checkDisconnected()
{
	local format=$1
	local forceRemove=$2
	
	for ifile in `find . -maxdepth 1 -name  "*.$format" | sed -r 's/^\.\///g'`
	do
		echo -n "   Checking $ifile ... "
		
		if [ `molecule.isConnected $ifile $BONDING_TOL_SCALE` = "F" ]
		then
			if [ "$forceRemove" = "TRUE" ]
			then
				echo "Disconnected --> Removed"
				rm $ifile
			else
				echo "--> Disconnected"
			fi
			
			continue
		fi
		
		echo "OK"
	done
}

function bold(){ echo "\e[1m$1\e[0m"; }
function underline(){ echo "\e[4m$1\e[0m"; }

##
# @brief
##
function usage()
{
	echo -e ""
	echo -e "`bold "SYNOPSYS:"`"
	echo -e ""
	echo -e "      ${0##*/} [ OPTIONS ]"
	echo -e ""
	echo -e "`bold "OPTIONS"`"
	echo -e "      ${0##*/} accepts the following options.  Standard options are listed first, listed alphabetically by short option."
	echo -e ""
	echo -e "     -f `underline format`"
	echo -e "     --format `underline format`"
	echo -e "          Read the molecular structures using the format `underline format`. Supported formats are xyz,xyz0,rxyz"
	echo -e ""
	echo -e "     -c `underline type`"
	echo -e "     --check `underline type`"
	echo -e "          Type of check. Available option for `underline type` are FORMAT,DUPLICATED,DISCONNECTED,ALL"
	echo -e ""
	echo -e "     -r"
	echo -e "     --remove"
	echo -e "          Run in force remove mode."
	echo -e ""
	echo -e "     -b"
	echo -e "     --bond `underline scale`"
	echo -e "          Bonding scale factor. Two atoms are considered bonded if their covalent radius satisfy dij < (Rci+Rcj)*`underline scale`"
	echo -e "          (default 1.2)"
	echo -e ""
	echo -e "     -s"
	echo -e "     --similarity `underline threshold`"
	echo -e "          Similarity threshold. Two molecules are considered the same if their similarity indices differ less that `underline threshold`"
	echo -e "          Suggested values: 0.90-0.92 (coarse), 0.97 (fine)"
	echo -e "          (default 0.9)"
	echo -e ""
	echo -e "     -m"
	echo -e "     --useMassWeight"
	echo -e "          Enables the Ballester descriptors are weighted by the mass of the atoms"
	echo -e ""
	echo -e "     -I"
	echo -e "     --useIm"
	echo -e "          The main components of the unitary inertia tensor of the molecules are used in addition to the"
	echo -e "          Ballester's descriptors in the geometry comparison."
	echo -e ""
	echo -e "     -N"
	echo -e "     --useNodeWeights"
	echo -e "          The mass of the atoms is used to weight the nodes of the molecular graph."
	echo -e ""
	echo -e "     -E"
	echo -e "     --useEdgeWeights"
	echo -e "          The interatomic distance is used to weight the edges of the molecular graph."
	echo -e ""
	exit
}

##
# @brief
##
function main()
{
	local format=""
	local action=""
	local forceRemove="FALSE"
	
	if [ "$#" -lt 1 ]
	then
		usage
	fi
	
	TEMP=`getopt \
		-o f:c:rb:s:mINE \
		--long format:,check:,remove,bond,similarity,useMassWeight,useIm,useNodeWeights,useEdgeWeights \
		-n 'M3C.check' -- "$@"`

	eval set -- "$TEMP"
	
	while true
	do
		case "$1" in
			-f|--format)
				case "$2" in
					xyz|xyz0|rxyz)
						format=$2
						;;
					*)
						echo "### Error ### Wrong value for format ($2)"
						usage
				esac
				
				shift 2
				;;
			-c|--check)
				
				case "$2" in
					FORMAT|DUPLICATED|DISCONNECTED|ALL)
						action=$2
						;;
					*)
						echo "### Error ### Wrong value for check ($2)"
						usage
				esac
				
				shift 2
				;;
			-r|--remove)
				forceRemove="TRUE"
				shift 1
				;;
			-b|--bond)
				BONDING_TOL_SCALE=$2
				shift 2
				;;
			-s|--similarity)
				SIMILARITY_THR=$2
				shift 2
				;;
			-m|--useMassWeight)
				USEMASSWEIGHT="TRUE"
				shift 1
				;;
			-I|--useIm)
				USEIM="TRUE"
				shift 1
				;;
			-N|--useNodeWeights)
				USENODEWEIGHTS="TRUE"
				shift 1
				;;
			-E|--useEdgeWeights)
				USEEDGEWEIGHTS="TRUE"
				shift 1
				;;
			--)
				shift
				break
				;;
			*)
				echo "Internal error!"
				usage
				exit 1
				;;
		esac
	done
	
	echo ""
	echo "Bonding scale factor: $BONDING_TOL_SCALE"
	echo "Similarity threshold: $SIMILARITY_THR"
	echo "Energy window: $ENERGY_WINDOW"
	echo "Use Mass Weights: $USEMASSWEIGHT"
	echo "Use Im: $USEIM"
	echo "Use Node Weights: $USENODEWEIGHTS"
	echo "Use Edge Weights: $USEEDGEWEIGHTS"
	echo ""
	
	case "$action" in
		FORMAT)
			echo "-------------------------------------"
			echo " Checking format                     "
			echo "-------------------------------------"
			echo ""
			checkConsistence $format $forceRemove
			;;
			
		DUPLICATED)
			echo ""
			echo "-------------------------------------"
			echo " Checking for duplicated molecules   "
			echo "-------------------------------------"
			echo ""
			checkRepeated $format . $forceRemove
			;;
			
		DISCONNECTED)
			echo ""
			echo "-------------------------------------"
			echo " Checking for disconnected molecules "
			echo "-------------------------------------"
			echo ""
			checkDisconnected $format $forceRemove
			;;
		ALL)
			echo "-------------------------------------"
			echo " Checking format                     "
			echo "-------------------------------------"
			echo ""
			checkConsistence $format $forceRemove
			echo ""
			echo "-------------------------------------"
			echo " Checking for duplicated molecules   "
			echo "-------------------------------------"
			echo ""
			checkRepeated $format . $forceRemove
			echo ""
			echo "-------------------------------------"
			echo " Checking for disconnected molecules "
			echo "-------------------------------------"
			echo ""
			checkDisconnected $format $forceRemove
			;;
		*)
			usage
	esac
}

main $*
