#!/bin/bash
##################################################################
#
#  This file is part of M3C
#  Copyright (C) by authors (2012-2016)
#  
#  Authors:
#    * Dr. Néstor F. Aguirre (2012-2016)
#          nestor.aguirre@uam.es
#    * Dr. Sergio Díaz-Tendero (2012-2015)
#          sergio.diaztendero@uam.es
#    * Prof. M. Paul-Antoine Hervieux (2012-2015)
#          Paul-Antoine.Hervieux@ipcms.unistra.fr
#    * Prof. Fernando Martín (2012-2015)
#          fernando.martin@uam.es
#    * Prof. Manuel Alcamí (2012-2015)
#          manuel.alcami@uam.es
#  
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the
#  following conditions are met:
#  
#   * Redistributions of binary or source code must retain
#     the above copyright notice and this list of conditions
#     and/or other materials provided with the distribution.
#   * All advertising materials mentioning features or use of
#     this software must display the following acknowledgement:
#     
#     This product includes software from M3C project.
#
##################################################################

GAMESS_TEMPLATE=$1
NPROCSHARED=$2

##############################
# Default options
##############################
if [ -z "$GAMESS_TEMPLATE" ]
then
	echo "usage: M3C-gamess.freqs gamessTemplate [ nProcShared ]"
	echo "                                              1       "
	exit
fi

[ -z "$NPROCSHARED" ] && NPROCSHARED=1
##############################

if [ -f "$M3C_HOME/bin/gamessDriver.sh" ]
then
	source $M3C_HOME/bin/gamessDriver.sh
else
	source $M3C_HOME/src/gamessDriver.sh
fi

frequencies()
{
	local iFileXYZ=$1
	local charge=$3
	local mult=$4
	
	freqsGAMESSTemplate $GAMESS_TEMPLATE $NPROCSHARED $iFileXYZ $charge $mult $DEBUG > ${iFileXYZ%.*}.rxyz
	mv ${iFileXYZ%.*}.out history.freqs/ 2> /dev/null
	mv ${iFileXYZ%.*}.inp history.freqs/ 2> /dev/null
}

main()
{
	local xyzFile=""
	local charge=""
	local mult=""

    if [ -n "$SLURM_NTASKS" ]
    then
		nThreads=$SLURM_NTASKS
    else
		nThreads=`cat /proc/cpuinfo | grep processor | wc -l`
	fi
	nThreads=$(( $nThreads/$NPROCSHARED ))

	if [ -d "history.freqs" ]
	then
		echo "@@@ WARNING @@@ There is already a history directory (history.freqs). Backup copy will be generated"
		mv history.freqs history.freqs.backup-`date +%Y%m%d`
	fi
	mkdir history.freqs

	xyzFile=( `ls *.xyz` )
	charge=( `ls *.xyz | gawk 'BEGIN{FS="[.-]+"}{print $2}' | sed 's/q//g'` )
	mult=( `ls *.xyz | gawk 'BEGIN{FS="[.-]+"}{print $3}' | sed 's/m//g'` )
	
	#-----------------------------------------------------------------------
	
	startTime=`date "+%s"`
	
	ij=-1
	for (( i=0; i<=$(( ${#xyzFile[@]}/$nThreads-1 )); i++ ))
	do
		iStartTime=`date "+%s"`
		
		echo -n "Running: "
		
		for (( j=1; j<=$nThreads; j++ ))
		do
			ij=$(( $j-1+$nThreads*$i ))
			
			if (( j != $nThreads ))
			then
				printf "%15s," "${xyzFile[$ij]%.*}"
			else
				printf "%15s" "${xyzFile[$ij]%.*}"
			fi
			
			frequencies ${xyzFile[$ij]} ${charge[$ij]} ${mult[$ij]} &
		done
		
		echo -n " ... "
		
		wait
		
		iEndTime=`date "+%s"`
		elapsedTime=$(( $iEndTime-$iStartTime ))
		echo "OK     `echo -n  "Time elapsed:"` $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	done

	if (( $ij < ${#xyzFile[@]} ))
	then
		iStartTime=`date "+%s"`
		
		echo -n "Running: "
		
		k=1
		for (( i=$(( $ij+1 )); i<${#xyzFile[@]}; i++ ))
		do
			if (( $i != $(( ${#xyzFile[@]} - 1 )) ))
			then
				printf "%15s," "${xyzFile[$i]%.*}"
			else
				printf "%15s " "${xyzFile[$i]%.*}"
			fi
			
			frequencies ${xyzFile[$i]} ${charge[$i]} ${mult[$i]} &
			
			k=$(( $k+1 ))
		done
		
		for (( i=$k; i<=$nThreads; i++ ))
		do
			if (( i != $nThreads ))
			then
				printf "%15s " ""
			else
				printf "%15s" ""
			fi
		done
		
		echo -n " ... "
		
		wait
		
		iEndTime=`date "+%s"`
		elapsedTime=$(( $iEndTime-$iStartTime ))
		echo "OK     `echo -n  "Time elapsed:"` $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	fi
	
	endTime=`date "+%s"`
	elapsedTime=$(( $endTime-$startTime ))
	
	echo -n "        "
	printf "%$(( 15*(${nThreads}+1) ))s" ""
	echo "            ` echo -n  "Total"`: $(( $elapsedTime / 3600 ))h $(( ( $elapsedTime / 60 ) % 60 ))m $(( $elapsedTime % 60 ))s"
	
	#-----------------------------------------------------------------------
}

main $*

